{"version":3,"file":"react-phone-number-input-max.js","sources":["../node_modules/classnames/index.js","../node_modules/input-format/modules/parse.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/helpers.js","../node_modules/input-format/modules/close braces.js","../node_modules/input-format/modules/template formatter.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/dom.js","../node_modules/input-format/modules/input control.js","../node_modules/input-format/modules/react/Input.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/util.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/extension.js","../node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/getNumberType_.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/IDD.js","../node_modules/libphonenumber-js/es6/RFC3966.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/getCountries.js","../modules/inputValuePrefix.js","../modules/InputSmart.js","../modules/InputBasic.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../modules/Flag.js","../modules/InternationalIcon.js","../modules/countries.js","../modules/CountryIcon.js","../modules/PropTypes.js","../modules/phoneInputHelpers.js","../modules/PhoneInputWithCountry.js","../modules/libphonenumber/formatPhoneNumber.js","../modules/libphonenumber/isValidPhoneNumber.js","../modules/libphonenumber/isPossiblePhoneNumber.js","../node_modules/country-flag-icons/modules/unicode.js","../modules/CountrySelect.js","../modules/PhoneInputWithCountryDefault.js","../max/index.js"],"sourcesContent":["/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parse;\n// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nfunction parse(text, caret_position, parse_character) {\n\tvar value = '';\n\n\tvar focused_input_character_index = 0;\n\n\tvar index = 0;\n\twhile (index < text.length) {\n\t\tvar character = parse_character(text[index], value);\n\n\t\tif (character !== undefined) {\n\t\t\tvalue += character;\n\n\t\t\tif (caret_position !== undefined) {\n\t\t\t\tif (caret_position === index) {\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\n\t\t\t\t} else if (caret_position > index) {\n\t\t\t\t\tfocused_input_character_index = value.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tindex++;\n\t}\n\n\t// If caret position wasn't specified\n\tif (caret_position === undefined) {\n\t\t// Then set caret position to \"after the last input character\"\n\t\tfocused_input_character_index = value.length;\n\t}\n\n\tvar result = {\n\t\tvalue: value,\n\t\tcaret: focused_input_character_index\n\t};\n\n\treturn result;\n}\n//# sourceMappingURL=parse.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = edit;\n// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nfunction edit(value, caret, operation) {\n\tswitch (operation) {\n\t\tcase 'Backspace':\n\t\t\t// If there exists the previous character,\n\t\t\t// then erase it and reposition the caret.\n\t\t\tif (caret > 0) {\n\t\t\t\t// Remove the previous character\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret);\n\t\t\t\t// Position the caret where the previous (erased) character was\n\t\t\t\tcaret--;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Delete':\n\t\t\t// Remove current digit (if any)\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1);\n\t\t\tbreak;\n\t}\n\n\treturn { value: value, caret: caret };\n}\n//# sourceMappingURL=edit.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.count_occurences = count_occurences;\n// Counts all occurences of a symbol in a string\nfunction count_occurences(symbol, string) {\n\tvar count = 0;\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes)\n\t// but template placeholder characters don't fall into that range\n\t// so skipping such miscellaneous \"exotic\" characters\n\t// won't matter here for just counting placeholder character occurrences.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n//# sourceMappingURL=helpers.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = close_braces;\n\nvar _helpers = require('./helpers');\n\nfunction close_braces(retained_template, template) {\n\tvar placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n\tvar empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n\n\tvar cut_before = retained_template.length;\n\n\tvar opening_braces = (0, _helpers.count_occurences)('(', retained_template);\n\tvar closing_braces = (0, _helpers.count_occurences)(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\n\t\tcut_before++;\n\t}\n\n\treturn retained_template;\n}\n//# sourceMappingURL=close braces.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (template) {\n\tvar placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n\tvar should_close_braces = arguments[2];\n\n\tif (!template) {\n\t\treturn function (value) {\n\t\t\treturn { text: value };\n\t\t};\n\t}\n\n\tvar characters_in_template = (0, _helpers.count_occurences)(placeholder, template);\n\n\treturn function (value) {\n\t\tif (!value) {\n\t\t\treturn { text: '', template: template };\n\t\t}\n\n\t\tvar value_character_index = 0;\n\t\tvar filled_in_template = '';\n\n\t\t// Using `.split('')` here instead of normal `for ... of`\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t\t// (the ones consisting of four bytes)\n\t\t// but template placeholder characters don't fall into that range\n\t\t// and appending UTF-8 characters to a string in parts still works.\n\t\tfor (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\tvar _ref;\n\n\t\t\tif (_isArray) {\n\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t_ref = _iterator[_i++];\n\t\t\t} else {\n\t\t\t\t_i = _iterator.next();\n\t\t\t\tif (_i.done) break;\n\t\t\t\t_ref = _i.value;\n\t\t\t}\n\n\t\t\tvar character = _ref;\n\n\t\t\tif (character !== placeholder) {\n\t\t\t\tfilled_in_template += character;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfilled_in_template += value[value_character_index];\n\t\t\tvalue_character_index++;\n\n\t\t\t// If the last available value character has been filled in,\n\t\t\t// then return the filled in template\n\t\t\t// (either trim the right part or retain it,\n\t\t\t//  if no more character placeholders in there)\n\t\t\tif (value_character_index === value.length) {\n\t\t\t\t// If there are more character placeholders\n\t\t\t\t// in the right part of the template\n\t\t\t\t// then simply trim it.\n\t\t\t\tif (value.length < characters_in_template) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (should_close_braces) {\n\t\t\tfilled_in_template = (0, _closeBraces2.default)(filled_in_template, template);\n\t\t}\n\n\t\treturn { text: filled_in_template, template: template };\n\t};\n};\n\nvar _helpers = require('./helpers');\n\nvar _closeBraces = require('./close braces');\n\nvar _closeBraces2 = _interopRequireDefault(_closeBraces);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=template formatter.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = format;\n\nvar _templateFormatter = require('./template formatter');\n\nvar _templateFormatter2 = _interopRequireDefault(_templateFormatter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\nfunction format(value, caret, formatter) {\n\tif (typeof formatter === 'string') {\n\t\tformatter = (0, _templateFormatter2.default)(formatter);\n\t}\n\n\tvar _ref = formatter(value) || {},\n\t    text = _ref.text,\n\t    template = _ref.template;\n\n\tif (text === undefined) {\n\t\ttext = value;\n\t}\n\n\tif (template) {\n\t\tif (caret === undefined) {\n\t\t\tcaret = text.length;\n\t\t} else {\n\t\t\tvar index = 0;\n\t\t\tvar found = false;\n\n\t\t\tvar possibly_last_input_character_index = -1;\n\n\t\t\twhile (index < text.length && index < template.length) {\n\t\t\t\t// Character placeholder found\n\t\t\t\tif (text[index] !== template[index]) {\n\t\t\t\t\tif (caret === 0) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tcaret = index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tpossibly_last_input_character_index = index;\n\n\t\t\t\t\tcaret--;\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\t// If the caret was positioned after last input character,\n\t\t\t// then the text caret index is just after the last input character.\n\t\t\tif (!found) {\n\t\t\t\tcaret = possibly_last_input_character_index + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { text: text, caret: caret };\n}\n//# sourceMappingURL=format.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getSelection = getSelection;\nexports.getOperation = getOperation;\nexports.getCaretPosition = getCaretPosition;\nexports.setCaretPosition = setCaretPosition;\n// Gets <input/> selection bounds\nfunction getSelection(element) {\n\t// If no selection, return nothing\n\tif (element.selectionStart === element.selectionEnd) {\n\t\treturn;\n\t}\n\n\treturn { start: element.selectionStart, end: element.selectionEnd };\n}\n\n// Key codes\nvar Keys = exports.Keys = {\n\tBackspace: 8,\n\tDelete: 46\n\n\t// Finds out the operation to be intercepted and performed\n\t// based on the key down event `keyCode`.\n};function getOperation(event) {\n\tswitch (event.keyCode) {\n\t\tcase Keys.Backspace:\n\t\t\treturn 'Backspace';\n\n\t\tcase Keys.Delete:\n\t\t\treturn 'Delete';\n\t}\n}\n\n// Gets <input/> caret position\nfunction getCaretPosition(element) {\n\treturn element.selectionStart;\n}\n\n// Sets <input/> caret position\nfunction setCaretPosition(element, caret_position) {\n\t// Sanity check\n\tif (caret_position === undefined) {\n\t\treturn;\n\t}\n\n\t// Set caret position.\n\t// There has been an issue with caret positioning on Android devices.\n\t// https://github.com/catamphetamine/input-format/issues/2\n\t// I was revisiting this issue and looked for similar issues in other libraries.\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n\t// https://github.com/text-mask/text-mask/issues/300\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n\t// https://github.com/text-mask/text-mask/pull/400/files\n\t// I've implemented the same workaround here.\n\tif (isAndroid()) {\n\t\tsetTimeout(function () {\n\t\t\treturn element.setSelectionRange(caret_position, caret_position);\n\t\t}, 0);\n\t} else {\n\t\telement.setSelectionRange(caret_position, caret_position);\n\t}\n}\n\nfunction isAndroid() {\n\t// `navigator` is not defined when running mocha tests.\n\tif (typeof navigator !== 'undefined') {\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n\t}\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.onCut = onCut;\nexports.onPaste = onPaste;\nexports.onChange = onChange;\nexports.onKeyDown = onKeyDown;\n\nvar _edit = require('./edit');\n\nvar _edit2 = _interopRequireDefault(_edit);\n\nvar _parse3 = require('./parse');\n\nvar _parse4 = _interopRequireDefault(_parse3);\n\nvar _format2 = require('./format');\n\nvar _format3 = _interopRequireDefault(_format2);\n\nvar _dom = require('./dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction onCut(event, input, _parse, _format, on_change) {\n\t// The actual cut hasn't happened just yet hence the timeout.\n\tsetTimeout(function () {\n\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t}, 0);\n}\n\nfunction onPaste(event, input, _parse, _format, on_change) {\n\tvar selection = (0, _dom.getSelection)(input);\n\n\t// If selection is made,\n\t// just erase the selected text\n\t// prior to pasting\n\tif (selection) {\n\t\terase_selection(input, selection);\n\t}\n\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\nfunction onChange(event, input, _parse, _format, on_change) {\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\n// Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\nfunction onKeyDown(event, input, _parse, _format, on_change) {\n\tvar operation = (0, _dom.getOperation)(event);\n\n\tswitch (operation) {\n\t\tcase 'Delete':\n\t\tcase 'Backspace':\n\t\t\t// Intercept this operation and perform it manually.\n\t\t\tevent.preventDefault();\n\n\t\t\tvar selection = (0, _dom.getSelection)(input);\n\n\t\t\t// If selection is made,\n\t\t\t// just erase the selected text,\n\t\t\t// and don't apply any more operations to it.\n\t\t\tif (selection) {\n\t\t\t\terase_selection(input, selection);\n\t\t\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t\t\t}\n\n\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\treturn format_input_text(input, _parse, _format, operation, on_change);\n\n\t\tdefault:\n\t\t// Will be handled when `onChange` fires.\n\t}\n}\n\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\nfunction erase_selection(input, selection) {\n\tvar text = input.value;\n\ttext = text.slice(0, selection.start) + text.slice(selection.end);\n\n\tinput.value = text;\n\t(0, _dom.setCaretPosition)(input, selection.start);\n}\n\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n\t// Parse `<input/>` textual value.\n\t// Get `value` and `caret` position.\n\tvar _parse2 = (0, _parse4.default)(input.value, (0, _dom.getCaretPosition)(input), _parse),\n\t    value = _parse2.value,\n\t    caret = _parse2.caret;\n\n\t// If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n\t// then apply that operation and get new `value` and `caret` position.\n\n\n\tif (operation) {\n\t\tvar operation_applied = (0, _edit2.default)(value, caret, operation);\n\n\t\tvalue = operation_applied.value;\n\t\tcaret = operation_applied.caret;\n\t}\n\n\t// Format the `value`.\n\t// (and reposition the caret accordingly)\n\tvar formatted = (0, _format3.default)(value, caret, _format);\n\n\tvar text = formatted.text;\n\tcaret = formatted.caret;\n\n\t// Set `<input/>` textual value manually\n\t// to prevent React from resetting the caret position\n\t// later inside subsequent `render()`.\n\t// Doesn't work for custom `inputComponent`s for some reason.\n\tinput.value = text;\n\t// Position the caret properly.\n\t(0, _dom.setCaretPosition)(input, caret);\n\n\t// `<input/>` textual value may have changed,\n\t// so the parsed `value` may have changed too.\n\t// The `value` didn't neccessarily change\n\t// but it might have.\n\ton_change(value);\n}\n//# sourceMappingURL=input control.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('../parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('../input control');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // This is just `./ReactInput.js` rewritten in Hooks.\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\nfunction Input(_ref, ref) {\n\tvar value = _ref.value,\n\t    parse = _ref.parse,\n\t    format = _ref.format,\n\t    InputComponent = _ref.inputComponent,\n\t    onChange = _ref.onChange,\n\t    onCut = _ref.onCut,\n\t    onPaste = _ref.onPaste,\n\t    onKeyDown = _ref.onKeyDown,\n\t    rest = _objectWithoutProperties(_ref, ['value', 'parse', 'format', 'inputComponent', 'onChange', 'onCut', 'onPaste', 'onKeyDown']);\n\n\tvar ownRef = (0, _react.useRef)();\n\tref = ref || ownRef;\n\tvar _onChange = (0, _react.useCallback)(function (event) {\n\t\treturn (0, _inputControl.onChange)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange]);\n\n\tvar _onPaste = (0, _react.useCallback)(function (event) {\n\t\tif (onPaste) {\n\t\t\tonPaste(event);\n\t\t}\n\t\treturn (0, _inputControl.onPaste)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onPaste]);\n\n\tvar _onCut = (0, _react.useCallback)(function (event) {\n\t\tif (onCut) {\n\t\t\tonCut(event);\n\t\t}\n\t\treturn (0, _inputControl.onCut)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onCut]);\n\n\tvar _onKeyDown = (0, _react.useCallback)(function (event) {\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event);\n\t\t}\n\t\treturn (0, _inputControl.onKeyDown)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onKeyDown]);\n\n\treturn _react2.default.createElement(InputComponent, _extends({}, rest, {\n\t\tref: ref,\n\t\tvalue: format(isEmptyValue(value) ? '' : value).text,\n\t\tonKeyDown: _onKeyDown,\n\t\tonChange: _onChange,\n\t\tonPaste: _onPaste,\n\t\tonCut: _onCut }));\n}\n\nInput = _react2.default.forwardRef(Input);\n\nInput.propTypes = {\n\t// Parses a single characher of `<input/>` text.\n\tparse: _propTypes2.default.func.isRequired,\n\n\t// Formats `value` into `<input/>` text.\n\tformat: _propTypes2.default.func.isRequired,\n\n\t// Renders `<input/>` by default.\n\tinputComponent: _propTypes2.default.elementType.isRequired,\n\n\t// `<input/>` `type` attribute.\n\ttype: _propTypes2.default.string.isRequired,\n\n\t// Is parsed from <input/> text.\n\tvalue: _propTypes2.default.string,\n\n\t// This handler is called each time `<input/>` text is changed.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// Passthrough\n\tonKeyDown: _propTypes2.default.func,\n\tonCut: _propTypes2.default.func,\n\tonPaste: _propTypes2.default.func\n};\n\nInput.defaultProps = {\n\t// Renders `<input/>` by default.\n\tinputComponent: 'input',\n\n\t// `<input/>` `type` attribute.\n\ttype: 'text'\n};\n\nexports.default = Input;\n\n\nfunction isEmptyValue(value) {\n\treturn value === undefined || value === null;\n}\n//# sourceMappingURL=Input.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nexport var WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nexport var PLUS_CHARS = '+\\uFF0B';\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport function mergeArrays(a, b) {\n\tvar merged = a.slice();\n\n\tfor (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar element = _ref;\n\n\t\tif (a.indexOf(element) < 0) {\n\t\t\tmerged.push(element);\n\t\t}\n\t}\n\n\treturn merged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\t// ES6 version, requires Set polyfill.\n\t// let merged = new Set(a)\n\t// for (const element of b)\n\t// {\n\t// \tmerged.add(i)\n\t// }\n\t// return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport compare from './tools/semver-compare';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\n/**\r\n * See: https://github.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\tvalidateMetadata(metadata);\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n\t\tthis.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'getCountries',\n\t\tvalue: function getCountries() {\n\t\t\treturn Object.keys(this.metadata.countries).filter(function (_) {\n\t\t\t\treturn _ !== '001';\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'getDefaultCountryMetadataForRegion',\n\t\tvalue: function getDefaultCountryMetadataForRegion() {\n\t\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'IDDPrefix',\n\t\tvalue: function IDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'defaultIDDPrefix',\n\t\tvalue: function defaultIDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[12];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\tif (this.v1 || this.v2) return this.country_metadata[1];\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[this.v2 ? 2 : 3];\n\t\t}\n\t}, {\n\t\tkey: '_getFormats',\n\t\tvalue: function _getFormats(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// formats are all stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixFormattingRule',\n\t\tvalue: function _getNationalPrefixFormattingRule(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// national prefix formatting rule is stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: '_nationalPrefixForParsing',\n\t\tvalue: function _nationalPrefixForParsing() {\n\t\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function _getNationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// \"national prefix is optional when formatting\" flag is\n\t\t// stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormattingInNationalFormat',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n\t\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this.types() && this.types().length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Versions <= 1.2.4: can be `undefined`.\n\t\t\t// Version >= 1.2.5: can be `0`.\n\t\t\treturn !!this.types();\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'ext',\n\t\tvalue: function ext() {\n\t\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n\t\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormattingInNationalFormat',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n\t\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormattingInNationalFormat',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix.\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule());\n\t\t\t// Previously, `FIRST_GROUP_ONLY_PREFIX_PATTERN` check was instead done via:\n\t\t\t// // Check that national prefix formatting rule is not a \"dummy\" one.\n\t\t\t// this.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// // Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\t// // Filters out cases like \"($1)\".\n\t\t\t// // Is used in place of `libphonenumber`'s `FIRST_GROUP_ONLY_PREFIX_PATTERN_` regexp.\n\t\t\t// /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n\nexport function validateMetadata(metadata) {\n\tif (!metadata) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n\t}\n\n\t// `country_phone_code_to_countries` was renamed to\n\t// `country_calling_codes` in `1.0.18`.\n\tif (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar type_of = function type_of(_) {\n\treturn typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\nexport function getExtPrefix(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).ext();\n\t}\n\treturn DEFAULT_EXT_PREFIX;\n}\n\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\nexport function getCountryCallingCode(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).countryCallingCode();\n\t}\n\tthrow new Error('Unknown country: ' + country);\n}\n\nexport function isSupportedCountry(country, metadata) {\n\t// metadata = new Metadata(metadata)\n\t// return metadata.hasCountry(country)\n\treturn metadata.countries[country] !== undefined;\n}\n//# sourceMappingURL=metadata.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\nexport default function cmp(a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n//# sourceMappingURL=semver-compare.js.map","import { VALID_DIGITS } from './constants';\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nfunction create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\n\t// \"доб.\"\n\t'\\u0434\\u043E\\u0431|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nexport function extractExtension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n//# sourceMappingURL=extension.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension';\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport default function isViablePhoneNumber(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport function parseDigit(character) {\n\treturn DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nexport default function parseDigits(string) {\n\tvar result = '';\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tvar digit = parseDigit(character);\n\t\tif (digit) {\n\t\t\tresult += digit;\n\t\t}\n\t}\n\treturn result;\n}\n//# sourceMappingURL=parseDigits.js.map","import { parseDigit } from './parseDigits';\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\nexport default function parseIncompletePhoneNumber(string) {\n\tvar result = '';\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tresult += parsePhoneNumberCharacter(character, result) || '';\n\t}\n\treturn result;\n}\n\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\nexport function parsePhoneNumberCharacter(character, value) {\n\t// Only allow a leading `+`.\n\tif (character === '+') {\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn;\n\t\t}\n\t\treturn '+';\n\t}\n\t// Allow digits.\n\treturn parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType(input) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tfor (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar _type = _ref;\n\n\t\tif (is_of_type(nationalNumber, _type, metadata)) {\n\t\t\treturn _type;\n\t\t}\n\t}\n}\n\nexport function is_of_type(nationalNumber, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn matchesEntirely(nationalNumber, type.pattern());\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = nationalNumber.length;\n\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\n\nexport default function isPossibleNumber(input, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (options.v2) {\n\t\tif (!input.countryCallingCode) {\n\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t}\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else {\n\t\tif (!input.phone) {\n\t\t\treturn false;\n\t\t}\n\t\tif (input.country) {\n\t\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t\t}\n\t\t\tmetadata.country(input.country);\n\t\t} else {\n\t\t\tif (!input.countryCallingCode) {\n\t\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t\t}\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t\t}\n\t}\n\n\tif (!metadata.possibleLengths()) {\n\t\tthrow new Error('Metadata too old');\n\t}\n\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\n\nexport function is_possible_number(national_number, is_international, metadata) {\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport function getIDDPrefix(country, metadata) {\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n\t\treturn countryMetadata.IDDPrefix();\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix();\n}\n\nexport function stripIDDPrefix(number, country, metadata) {\n\tif (!country) {\n\t\treturn;\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tvar IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn;\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length);\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tvar matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n\t\tif (matchedGroups[1] === '0') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn number;\n}\n//# sourceMappingURL=IDD.js.map","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport isViablePhoneNumber from './isViablePhoneNumber';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\n\ttext = text.replace(/^tel:/, 'tel=');\n\n\tfor (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar part = _ref;\n\n\t\tvar _part$split = part.split('='),\n\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t    name = _part$split2[0],\n\t\t    value = _part$split2[1];\n\n\t\tswitch (name) {\n\t\t\tcase 'tel':\n\t\t\t\tnumber = value;\n\t\t\t\tbreak;\n\t\t\tcase 'ext':\n\t\t\t\text = value;\n\t\t\t\tbreak;\n\t\t\tcase 'phone-context':\n\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\tnumber = value + number;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If the phone number is not viable, then abort.\n\tif (!isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\tvar result = { number: number };\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref2) {\n\tvar number = _ref2.number,\n\t    ext = _ref2.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\n\nvar DEFAULT_OPTIONS = {\n\tformatExtension: function formatExtension(formattedNumber, extension, metadata) {\n\t\treturn '' + formattedNumber + metadata.ext() + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n\t// formatNumber('+78005553535', 'NATIONAL')\n\t// formatNumber('+78005553535', 'NATIONAL', metadata)\n\t// ```\n\t//\n};export default function formatNumber(input, format, options, metadata) {\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, DEFAULT_OPTIONS, options);\n\t} else {\n\t\toptions = DEFAULT_OPTIONS;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (input.country) {\n\t\t// Validate `input.country`.\n\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t}\n\t\tmetadata.country(input.country);\n\t} else if (input.countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else return input.phone || '';\n\n\tvar countryCallingCode = metadata.countryCallingCode();\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n\t// This variable should have been declared inside `case`s\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\n\tvar number = void 0;\n\n\tswitch (format) {\n\t\tcase 'NATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options);\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'INTERNATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '+' + countryCallingCode;\n\t\t\t}\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n\t\t\tnumber = '+' + countryCallingCode + ' ' + number;\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + countryCallingCode + nationalNumber;\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966({\n\t\t\t\tnumber: '+' + countryCallingCode + nationalNumber,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'IDD':\n\t\t\tif (!options.fromCountry) {\n\t\t\t\treturn;\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n\t\t\t}\n\t\t\tvar IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\t\t\tif (!IDDPrefix) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.humanReadable) {\n\t\t\t\tvar formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata, options);\n\t\t\t\tif (formattedForSameCountryCallingCode) {\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode;\n\t\t\t\t} else {\n\t\t\t\t\tnumber = IDDPrefix + ' ' + countryCallingCode + ' ' + formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n\t\t\t\t}\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\t\t\t}\n\t\t\treturn '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function formatNationalNumberUsingFormat(number, format, useInternationalSeparator, useNationalPrefixFormattingRule, metadata) {\n\tvar formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalSeparator ? format.internationalFormat() : useNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\tif (useInternationalSeparator) {\n\t\treturn applyInternationalSeparatorStyle(formattedNumber);\n\t}\n\treturn formattedNumber;\n}\n\nfunction formatNationalNumber(number, formatAs, metadata, options) {\n\tvar format = chooseFormatForNumber(metadata.formats(), number);\n\tif (!format) {\n\t\treturn number;\n\t}\n\treturn formatNationalNumberUsingFormat(number, format, formatAs === 'INTERNATIONAL', format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true, metadata);\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n\tfor (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar format = _ref;\n\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0) {\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tvar lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\n\t\t\treturn format;\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nexport function applyInternationalSeparatorStyle(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata, options) {\n\tvar fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n\tfromCountryMetadata.country(fromCountry);\n\t// If calling within the same country calling code.\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n\t\t// For NANPA regions, return the national format for these regions\n\t\t// but prefix it with the country calling code.\n\t\tif (toCountryCallingCode === '1') {\n\t\t\treturn toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n\t\t}\n\t\t// If regions share a country calling code, the country calling code need\n\t\t// not be dialled. This also applies when dialling within a region, so this\n\t\t// if clause covers both these cases. Technically this is the case for\n\t\t// dialling from La Reunion to other overseas departments of France (French\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n\t\t// this edge case for now and for those cases return the version including\n\t\t// country calling code. Details here:\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\n\t\t//\n\t\treturn formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n\t}\n}\n//# sourceMappingURL=format_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n\tfunction PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n\t\t_classCallCheck(this, PhoneNumber);\n\n\t\tif (!countryCallingCode) {\n\t\t\tthrow new TypeError('`countryCallingCode` not passed');\n\t\t}\n\t\tif (!nationalNumber) {\n\t\t\tthrow new TypeError('`nationalNumber` not passed');\n\t\t}\n\t\t// If country code is passed then derive `countryCallingCode` from it.\n\t\t// Also store the country code as `.country`.\n\t\tif (isCountryCode(countryCallingCode)) {\n\t\t\tthis.country = countryCallingCode;\n\t\t\tvar _metadata = new Metadata(metadata);\n\t\t\t_metadata.country(countryCallingCode);\n\t\t\tcountryCallingCode = _metadata.countryCallingCode();\n\t\t}\n\t\tthis.countryCallingCode = countryCallingCode;\n\t\tthis.nationalNumber = nationalNumber;\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(PhoneNumber, [{\n\t\tkey: 'isPossible',\n\t\tvalue: function isPossible() {\n\t\t\treturn isPossibleNumber(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'isValid',\n\t\tvalue: function isValid() {\n\t\t\treturn isValidNumber(this, { v2: true }, this.metadata);\n\t\t}\n\n\t\t// // Is just an alias for `this.isValid() && this.country === country`.\n\t\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n\t\t// isValidForRegion(country) {\n\t\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n\t\t// }\n\n\t}, {\n\t\tkey: 'getType',\n\t\tvalue: function getType() {\n\t\t\treturn getNumberType(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format(_format, options) {\n\t\t\treturn formatNumber(this, _format, options ? _extends({}, options, { v2: true }) : { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'formatNational',\n\t\tvalue: function formatNational(options) {\n\t\t\treturn this.format('NATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'formatInternational',\n\t\tvalue: function formatInternational(options) {\n\t\t\treturn this.format('INTERNATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'getURI',\n\t\tvalue: function getURI(options) {\n\t\t\treturn this.format('RFC3966', options);\n\t\t}\n\t}]);\n\n\treturn PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\n\nvar isCountryCode = function isCountryCode(value) {\n\treturn (/^[A-Z]{2}$/.test(value)\n\t);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n\n  metadata = new Metadata(metadata);\n\n  // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\n\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber';\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nexport default function parse(text) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\tmetadata = new Metadata(metadata);\n\n\t// Validate `defaultCountry`.\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parseInput = parseInput(text, options.v2),\n\t    formattedPhoneNumber = _parseInput.number,\n\t    ext = _parseInput.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formattedPhoneNumber) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('NOT_A_NUMBER');\n\t\t}\n\t\treturn {};\n\t}\n\n\tvar _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, metadata),\n\t    country = _parsePhoneNumber.country,\n\t    nationalNumber = _parsePhoneNumber.nationalNumber,\n\t    countryCallingCode = _parsePhoneNumber.countryCallingCode,\n\t    carrierCode = _parsePhoneNumber.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n\t\t// Won't throw here because the regexp already demands length > 1.\n\t\t/* istanbul ignore if */\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_SHORT');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\tif (options.v2) {\n\t\tvar phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\t\tif (country) {\n\t\t\tphoneNumber.country = country;\n\t\t}\n\t\tif (carrierCode) {\n\t\t\tphoneNumber.carrierCode = carrierCode;\n\t\t}\n\t\tif (ext) {\n\t\t\tphoneNumber.ext = ext;\n\t\t}\n\t\treturn phoneNumber;\n\t}\n\n\t// Check if national phone number pattern matches the number.\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, nationalNumber, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n\t\tphone: nationalNumber,\n\t\text: ext\n\t};\n}\n\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\nexport function extractFormattedPhoneNumber(text, v2) {\n\tif (!text) {\n\t\treturn;\n\t}\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\n\t\tif (v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\treturn;\n\t}\n\t// Attempt to extract a possible number from the string passed in\n\tvar startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\tif (startsAt < 0) {\n\t\treturn;\n\t}\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(startsAt)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n/**\r\n * Strips any national prefix (such as 0, 1) present in the number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ number, carrierCode }`.\r\n */\nexport function stripNationalPrefixAndCarrierCode(number, metadata) {\n\tif (!number) {\n\t\treturn { number: number };\n\t}\n\n\tif (!metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// See METADATA.md for the description of\n\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n\n\t// Attempt to parse the first digits as a national prefix.\n\tvar prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar prefixMatch = prefixPattern.exec(number);\n\n\tif (!prefixMatch) {\n\t\treturn { number: number };\n\t}\n\n\tvar nationalSignificantNumber = void 0;\n\tvar carrierCode = void 0;\n\n\t// If a \"capturing group\" didn't match\n\t// then its element in `prefixMatch[]` array will be `undefined`.\n\n\tvar capturedGroupsCount = prefixMatch.length - 1;\n\tif (metadata.nationalPrefixTransformRule() && capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {\n\t\tnationalSignificantNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule());\n\t\t// Carrier code is the last captured group,\n\t\t// but only when there's more than one captured group.\n\t\tif (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {\n\t\t\tcarrierCode = prefixMatch[1];\n\t\t}\n\t}\n\t// If it's a simple-enough case then just\n\t// strip the national prefix from the number.\n\telse {\n\t\t\t// National prefix is the whole substring matched by\n\t\t\t// the `national_prefix_for_parsing` regexp.\n\t\t\tvar nationalPrefix = prefixMatch[0];\n\t\t\tnationalSignificantNumber = number.slice(nationalPrefix.length);\n\t\t\t// Carrier code is the last captured group.\n\t\t\tif (capturedGroupsCount > 0) {\n\t\t\t\tcarrierCode = prefixMatch[1];\n\t\t\t}\n\t\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matchesEntirely(number, national_number_rule) &&\n\t// \t!matchesEntirely(nationalSignificantNumber, national_number_rule)) {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: nationalSignificantNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nexport function findCountryCode(countryCallingCode, nationalPhoneNumber, metadata) {\n\t// Is always non-empty, because `countryCallingCode` is always valid\n\tvar possibleCountries = metadata.countryCallingCodes()[countryCallingCode];\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possibleCountries.length === 1) {\n\t\treturn possibleCountries[0];\n\t}\n\treturn _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\n// Changes `metadata` `country`.\nfunction _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {\n\tmetadata = new Metadata(metadata);\n\tfor (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country = _ref;\n\n\t\tmetadata.country(country);\n\t\t// Leading digits check would be the simplest one\n\t\tif (metadata.leadingDigits()) {\n\t\t\tif (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n\t\t\t\treturn country;\n\t\t\t}\n\t\t}\n\t\t// Else perform full validation with all of those\n\t\t// fixed-line/mobile/etc regular expressions.\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country: country }, undefined, metadata.metadata)) {\n\t\t\t\treturn country;\n\t\t\t}\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parseInput(text, v2) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn parseRFC3966(text);\n\t}\n\tvar number = extractFormattedPhoneNumber(text, v2);\n\t// If the phone number is not viable, then abort.\n\tif (!number || !isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = extractExtension(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber\r\n * @param {string} [defaultCountry]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, metadata) {\n\tvar _extractCountryCallin = extractCountryCallingCode(formattedPhoneNumber, defaultCountry, metadata.metadata),\n\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t    number = _extractCountryCallin.number;\n\n\tvar country = void 0;\n\n\tif (countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t}\n\t// If `formattedPhoneNumber` is in \"national\" format\n\t// then `number` is defined and `countryCallingCode` isn't.\n\telse if (number && defaultCountry) {\n\t\t\tmetadata.country(defaultCountry);\n\t\t\tcountry = defaultCountry;\n\t\t\tcountryCallingCode = getCountryCallingCode(defaultCountry, metadata.metadata);\n\t\t} else return {};\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar _parseNationalNumber = parseNationalNumber(number, metadata),\n\t    nationalNumber = _parseNationalNumber.nationalNumber,\n\t    carrierCode = _parseNationalNumber.carrierCode;\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t// get their countries populated with the full set of\n\t// \"phone number type\" regular expressions.\n\t//\n\n\n\tvar exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata);\n\tif (exactCountry) {\n\t\tcountry = exactCountry;\n\t\tmetadata.country(country);\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nfunction parseNationalNumber(number, metadata) {\n\tvar nationalNumber = parseIncompletePhoneNumber(number);\n\tvar carrierCode = void 0;\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(nationalNumber, metadata),\n\t    potentialNationalNumber = _stripNationalPrefixA.number,\n\t    potentialCarrierCode = _stripNationalPrefixA.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch (checkNumberLengthForType(potentialNationalNumber, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif (matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && !matchesEntirely(potentialNationalNumber, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\nexport function extractCountryCallingCode(number, country, metadata) {\n\tnumber = parseIncompletePhoneNumber(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\t// Convert an \"out-of-country\" dialing phone number\n\t\t// to a proper international phone number.\n\t\tvar numberWithoutIDD = stripIDDPrefix(number, country, metadata);\n\n\t\t// If an IDD prefix was stripped then\n\t\t// convert the number to international one\n\t\t// for subsequent parsing.\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\n\t\t\tnumber = '+' + numberWithoutIDD;\n\t\t} else {\n\t\t\treturn { number: number };\n\t\t}\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n\n\treturn {};\n}\n//# sourceMappingURL=parse_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parseNumber from './parse_';\n\nexport default function parsePhoneNumber(text, options, metadata) {\n\treturn parseNumber(text, _extends({}, options, { v2: true }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\n\nexport default function parsePhoneNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumber_(text, options, metadata);\n}\n\nexport function normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parsePhoneNumber('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed then move it to `options`.\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\tif (!arg_2 || typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = arg_3;\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = undefined;\n\t\t\tmetadata = arg_3;\n\t\t}\n\n\t\tif (arg_2) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, options);\n\t\t}\n\t}\n\t// `defaultCountry` is not passed.\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n\telse if (isObject(arg_2)) {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new Error('Invalid second argument: ' + arg_2);\n\n\treturn {\n\t\ttext: text,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Otherwise istanbul would show this as \"branch not covered\".\n/* istanbul ignore next */\nvar isObject = function isObject(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\n\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n\t// Validate `defaultCountry`.\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n\t\toptions = _extends({}, options, {\n\t\t\tdefaultCountry: undefined\n\t\t});\n\t}\n\t// Parse phone number.\n\ttry {\n\t\treturn parsePhoneNumber(text, options, metadata);\n\t} catch (error) {\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ParseError) {\n\t\t\t//\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\n\nexport default function parsePhoneNumberFromString() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nimport Metadata from './metadata';\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { matchesEntirely } from './util';\n\nimport { extractCountryCallingCode as _extractCountryCallingCode, extractFormattedPhoneNumber, findCountryCode, stripNationalPrefixAndCarrierCode } from './parse_';\n\nimport { FIRST_GROUP_PATTERN, formatNationalNumberUsingFormat, applyInternationalSeparatorStyle } from './format_';\n\nimport { checkNumberLengthForType } from './getNumberType_';\n\nimport parseDigits from './parseDigits';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\n\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/;\n\n// Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true;\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\[([^\\[\\]])*\\]/g\n\t);\n};\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\d(?=[^,}][^,}])/g\n\t);\n};\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_PART + '$', 'i');\n\nvar AsYouType = function () {\n\n\t/**\r\n  * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(defaultCountry, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.options = {};\n\n\t\tthis.metadata = new Metadata(metadata);\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n\t\t\tthis.defaultCountry = defaultCountry;\n\t\t}\n\t\tthis.reset();\n\t}\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\tthis.formattedOutput = '';\n\t\t\tthis.international = undefined;\n\t\t\tthis.countryCallingCode = undefined;\n\t\t\tthis.digits = '';\n\t\t\tthis.nationalNumberDigits = '';\n\t\t\tthis.nationalPrefix = '';\n\t\t\tthis.carrierCode = '';\n\t\t\tthis.setCountry(this.defaultCountry);\n\t\t\tthis.resetFormat();\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'setCountry',\n\t\tvalue: function setCountry(country) {\n\t\t\tthis.country = country;\n\t\t\tthis.metadata.country(country);\n\t\t\tif (country) {\n\t\t\t\tthis.initializePhoneNumberFormatsForCountry();\n\t\t\t} else {\n\t\t\t\tthis.matchingFormats = [];\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetFormat',\n\t\tvalue: function resetFormat() {\n\t\t\tthis.chosenFormat = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.populatedNationalNumberTemplate = undefined;\n\t\t\tthis.populatedNationalNumberTemplatePosition = -1;\n\t\t}\n\n\t\t/**\r\n   * Inputs \"next\" phone number characters.\r\n   * @param  {string} text\r\n   * @return {string} Formatted phone number characters that have been input so far.\r\n   */\n\n\t}, {\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\tvar formattedDigits = this.extractFormattedDigits(text);\n\t\t\t// If the extracted phone number part\n\t\t\t// can possibly be a part of some valid phone number\n\t\t\t// then parse phone number characters from a formatted phone number.\n\t\t\tif (VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN.test(formattedDigits)) {\n\t\t\t\tthis.formattedOutput = this.getFullNumber(this.inputDigits(parseDigits(formattedDigits)) || this.getNonFormattedNationalNumber());\n\t\t\t}\n\t\t\treturn this.formattedOutput;\n\t\t}\n\n\t\t/**\r\n   * Extracts formatted phone number digits from text (if there're any).\r\n   * @param  {string} text\r\n   * @return {string}\r\n   */\n\n\t}, {\n\t\tkey: 'extractFormattedDigits',\n\t\tvalue: function extractFormattedDigits(text) {\n\t\t\t// Extract a formatted phone number part from text.\n\t\t\tvar extractedNumber = extractFormattedPhoneNumber(text) || '';\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// because it's not extracted in such cases.\n\t\t\tif (!extractedNumber) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textractedNumber = '+';\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Trim a `+`.\n\t\t\tif (extractedNumber[0] === '+') {\n\t\t\t\t// Trim the `+`.\n\t\t\t\textractedNumber = extractedNumber.slice('+'.length);\n\t\t\t\tif (this.digits) {\n\t\t\t\t\t// If an out of position `+` is detected\n\t\t\t\t\t// (or a second `+`) then just ignore it.\n\t\t\t\t} else {\n\t\t\t\t\tthis.startInternationalNumber();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn extractedNumber;\n\t\t}\n\t}, {\n\t\tkey: 'startInternationalNumber',\n\t\tvalue: function startInternationalNumber() {\n\t\t\t// Prepend the `+` to parsed input.\n\t\t\tthis.international = true;\n\t\t\t// If a default country was set then reset it\n\t\t\t// because an explicitly international phone\n\t\t\t// number is being entered.\n\t\t\tthis.setCountry();\n\t\t}\n\n\t\t/**\r\n   * Inputs \"next\" phone number digits.\r\n   * @param  {string} digits\r\n   * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n   */\n\n\t}, {\n\t\tkey: 'inputDigits',\n\t\tvalue: function inputDigits(nextDigits) {\n\t\t\t// Append phone number digits.\n\t\t\tthis.digits += nextDigits;\n\t\t\t// Try to format the parsed input\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (this.countryCallingCode) {\n\t\t\t\t\tthis.nationalNumberDigits += nextDigits;\n\t\t\t\t\t// `this.country` could be `undefined`, for example, when there is\n\t\t\t\t\t// ambiguity in a form of several different countries,\n\t\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t\t// (e.g. NANPA: USA, Canada, etc), and there's not enough digits\n\t\t\t\t\t// to reliably determine the country the phone number belongs to.\n\t\t\t\t\t// Therefore, in cases of such ambiguity, each time something is input,\n\t\t\t\t\t// try to determine the country (if it hasn't been determined yet).\n\t\t\t\t\tif (!this.country || this.isCountryCallingCodeAmbiguous()) {\n\t\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Extract country calling code from the digits entered so far.\n\t\t\t\t\t// There must be some digits in order to extract anything from them.\n\t\t\t\t\tif (!this.digits) {\n\t\t\t\t\t\t// Don't format the phone number.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then they can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\t\t\t\t\t//\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then don't format the phone number.\n\t\t\t\t\t//\n\t\t\t\t\tif (!this.extractCountryCallingCode()) {\n\t\t\t\t\t\t// Don't format the phone number.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Possibly extract a national prefix.\n\t\t\t\t\t// Some people incorrectly input national prefix\n\t\t\t\t\t// in an international phone number.\n\t\t\t\t\t// For example, some people write British phone numbers as `+44(0)...`.\n\t\t\t\t\t// Also, mobile phone numbers in Mexico are supposed to be dialled\n\t\t\t\t\t// internationally using a `15` national prefix.\n\t\t\t\t\t//\n\t\t\t\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\n\t\t\t\t\t//\n\t\t\t\t\t// \"Dialing a Mexican cell phone from abroad\n\t\t\t\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\n\t\t\t\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\n\t\t\t\t\t// (which is “52”) and before the area code.\n\t\t\t\t\t// You also ignore the 045, and simply dial the area code and the\n\t\t\t\t\t// cell phone’s number.\n\t\t\t\t\t//\n\t\t\t\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\n\t\t\t\t\t// asking you to redial using it.\n\t\t\t\t\t//\n\t\t\t\t\t// For example, if you are calling from the USA to a cell phone\n\t\t\t\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n\t\t\t\t\t// (Note that this is different to calling a land line in Mexico City\n\t\t\t\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n\t\t\t\t\t//\n\t\t\t\t\tthis.nationalNumberDigits = this.digits.slice(this.countryCallingCode.length);\n\t\t\t\t\t// this.extractNationalPrefix()\n\t\t\t\t\t//\n\t\t\t\t\t// Determine the country from country calling code and national number.\n\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.nationalNumberDigits += nextDigits;\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\t\t\t\tvar previousNationalPrefix = this.nationalPrefix;\n\t\t\t\tthis.nationalNumberDigits = this.nationalPrefix + this.nationalNumberDigits;\n\t\t\t\t// Re-extract national prefix.\n\t\t\t\tthis.extractNationalPrefix();\n\t\t\t\t// If another national prefix has been extracted.\n\t\t\t\tif (this.nationalPrefix !== previousNationalPrefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.initializePhoneNumberFormatsForCountry();\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.nationalNumberDigits) {\n\t\t\t\t// Match the available formats by the currently available leading digits.\n\t\t\t\tthis.matchFormats(this.nationalNumberDigits);\n\t\t\t}\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\treturn this.formatNationalNumberWithNextDigits(nextDigits);\n\t\t}\n\t}, {\n\t\tkey: 'formatNationalNumberWithNextDigits',\n\t\tvalue: function formatNationalNumberWithNextDigits(nextDigits) {\n\t\t\t// See if the phone number digits can be formatted as a complete phone number.\n\t\t\t// If not, use the results from `formatNextNationalNumberDigits()`,\n\t\t\t// which formats based on the chosen formatting pattern.\n\t\t\t// Attempting to format complete phone number first is how it's done\n\t\t\t// in Google's `libphonenumber`.\n\t\t\tvar formattedNumber = this.attemptToFormatCompletePhoneNumber();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone number is invalid,\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formattedNumber) {\n\t\t\t\treturn formattedNumber;\n\t\t\t}\n\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attemptToFormatCompletePhoneNumber`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar previouslyChosenFormat = this.chosenFormat;\n\t\t\t// Choose a format from the list of matching ones.\n\t\t\tvar newlyChosenFormat = this.chooseFormat();\n\t\t\tif (newlyChosenFormat) {\n\t\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\n\t\t\t\t\t// If could format the next (current) digit\n\t\t\t\t\t// using the previously chosen phone number format\n\t\t\t\t\t// then return the formatted number so far.\n\t\t\t\t\t//\n\t\t\t\t\t// If no new phone number format could be chosen,\n\t\t\t\t\t// and couldn't format the supplied national number\n\t\t\t\t\t// using the previously chosen phone number pattern,\n\t\t\t\t\t// then return `undefined`.\n\t\t\t\t\t//\n\t\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits);\n\t\t\t\t} else {\n\t\t\t\t\t// If a more appropriate phone number format\n\t\t\t\t\t// has been chosen for these \"leading digits\",\n\t\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t\t// using the newly selected format.\n\t\t\t\t\t//\n\t\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t\t// the supplied national number\n\t\t\t\t\t// using the selected phone number pattern.\n\t\t\t\t\t//\n\t\t\t\t\treturn this.reformatNationalNumber();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'chooseFormat',\n\t\tvalue: function chooseFormat() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tfor (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref;\n\n\t\t\t\t// If this format is currently being used\n\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\tif (this.chosenFormat === format) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!this.createFormattingTemplate(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.chosenFormat = format;\n\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t// using the old template needs to be reset.\n\t\t\t\tthis.populatedNationalNumberTemplatePosition = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!this.chosenFormat) {\n\t\t\t\t// No format matches the national phone number entered.\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t\treturn this.chosenFormat;\n\t\t}\n\n\t\t// Formats each digit of the national phone number (so far)\n\t\t// using the selected format.\n\n\t}, {\n\t\tkey: 'reformatNationalNumber',\n\t\tvalue: function reformatNationalNumber() {\n\t\t\treturn this.formatNextNationalNumberDigits(this.nationalPrefix + this.nationalNumberDigits);\n\t\t}\n\t}, {\n\t\tkey: 'initializePhoneNumberFormatsForCountry',\n\t\tvalue: function initializePhoneNumberFormatsForCountry() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.matchingFormats = this.metadata.formats().filter(function (format) {\n\t\t\t\t// Compared to `libphonenumber`'s code, the two \"Discard a few formats\n\t\t\t\t// that we know are not relevant based on the presence of the national prefix\"\n\t\t\t\t// checks have changed: the first one has been moved to `.matchFormats()`,\n\t\t\t\t// and the second one doesn't apply to this library because it doesn't deal with\n\t\t\t\t// \"incomplete\" phone numbers (for example, phone numbers, entered without \"area code\").\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'matchFormats',\n\t\tvalue: function matchFormats(leadingDigits) {\n\t\t\tvar _this = this;\n\n\t\t\t// \"leading digits\" pattern list starts with a\n\t\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t\t// this national (significant) number can already be formatted.\n\t\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t\t// This implementation is different from Google's\n\t\t\t// in that it searches for a fitting format\n\t\t\t// even if the user has entered less than\n\t\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t\t// Because some leading digit patterns already match for a single first digit.\n\t\t\tvar leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\t\t\tif (leadingDigitsPatternIndex < 0) {\n\t\t\t\tleadingDigitsPatternIndex = 0;\n\t\t\t}\n\n\t\t\tthis.matchingFormats = this.matchingFormats.filter(function (format) {\n\t\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t\t// and the user didn't input the national prefix\n\t\t\t\t// then this phone number format isn't suitable.\n\t\t\t\tif (!_this.isInternational() && !_this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tvar leadingDigitsPatternsCount = format.leadingDigitsPatterns().length;\n\t\t\t\t// If this format is not restricted to a certain\n\t\t\t\t// leading digits pattern then it fits.\n\t\t\t\tif (leadingDigitsPatternsCount === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// Start excluding any non-matching formats only when the\n\t\t\t\t// national number entered so far is at least 3 digits long,\n\t\t\t\t// otherwise format matching would give false negatives.\n\t\t\t\t// For example, when the digits entered so far are `2`\n\t\t\t\t// and the leading digits pattern is `21` –\n\t\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t\t\t// then format matching starts narrowing down the list of possible formats\n\t\t\t\t// (only previously matched formats are considered for next digits).\n\t\t\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n\t\t\t\tvar leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex];\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leadingDigitsPattern + ')').test(leadingDigits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'getSeparatorAfterNationalPrefix',\n\t\tvalue: function getSeparatorAfterNationalPrefix(format) {\n\t\t\tif (this.metadata.countryCallingCode() === '1') {\n\t\t\t\treturn ' ';\n\t\t\t}\n\t\t\tif (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n\t\t\t\treturn ' ';\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\n\t\t// This is in accordance to how Google's `libphonenumber` does it.\n\t\t// \"Check to see if there is an exact pattern match for these digits.\n\t\t// If so, we should use this instead of any other formatting template\n\t\t// whose `leadingDigitsPattern` also matches the input.\"\n\n\t}, {\n\t\tkey: 'attemptToFormatCompletePhoneNumber',\n\t\tvalue: function attemptToFormatCompletePhoneNumber() {\n\t\t\tfor (var _iterator2 = this.matchingFormats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i2++];\n\t\t\t\t} else {\n\t\t\t\t\t_i2 = _iterator2.next();\n\t\t\t\t\tif (_i2.done) break;\n\t\t\t\t\t_ref2 = _i2.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref2;\n\n\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\t\t\t\tif (!matcher.test(this.nationalNumberDigits)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Here, national number is formatted without \"national prefix\n\t\t\t\t// formatting rule\", because otherwise there'd be a bug\n\t\t\t\t// when \"area code\" is \"duplicated\" during input:\n\t\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\n\t\t\t\tvar formattedNationalNumber = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), false, // Don't prepend national prefix (it will be prepended manually).\n\t\t\t\tthis.metadata);\n\t\t\t\t// Check if this `format` preserves all digits.\n\t\t\t\t// This is how it's done in Google's `libphonenumber`.\n\t\t\t\t// Also, it fixes the bug when \"area code\" is \"duplicated\" during input:\n\t\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\n\t\t\t\t//\n\t\t\t\t// \"Check that we didn't remove nor add any extra digits when we matched\n\t\t\t\t// this formatting pattern. This usually happens after we entered the last\n\t\t\t\t// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n\t\t\t\t// formatted but AYTF should retain all the number entered and not change\n\t\t\t\t// in order to match a format (of same leading digits and length) display\n\t\t\t\t// in that way.\"\n\t\t\t\t// \"If it's the same (i.e entered number and format is same), then it's\n\t\t\t\t// safe to return this in formatted number as nothing is lost / added.\"\n\t\t\t\t// Otherwise, don't use this format.\n\t\t\t\t// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n\t\t\t\t// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n\t\t\t\t//\n\t\t\t\tif (parseDigits(formattedNationalNumber) !== this.nationalNumberDigits) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Prepend national prefix (if any).\n\t\t\t\tif (this.nationalPrefix) {\n\t\t\t\t\t// Here, national number is formatted with \"national prefix\n\t\t\t\t\t// formatting rule\". The reason is that \"national prefix\n\t\t\t\t\t// formatting rule\" often adds parentheses, and while Google's\n\t\t\t\t\t// `libphonenumber` dismisses those preferring simply prepending\n\t\t\t\t\t// national prefix followed by a \" \" character, this library\n\t\t\t\t\t// looks if the national prefix could be formatted better.\n\t\t\t\t\tvar formattedNationalNumberWithNationalPrefix = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), true, // Prepend national prefix.\n\t\t\t\t\tthis.metadata);\n\t\t\t\t\tif (parseDigits(formattedNationalNumberWithNationalPrefix) === this.nationalPrefix + this.nationalNumberDigits) {\n\t\t\t\t\t\tformattedNationalNumber = formattedNationalNumberWithNationalPrefix;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tformattedNationalNumber = this.nationalPrefix + this.getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// formats national number (probably) without national prefix.\n\t\t\t\t// Formatting a national number with national prefix could result in\n\t\t\t\t// bugs when \"area code\" is \"duplicated\" during input:\n\t\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\n\t\t\t\t// The \"are all digits preserved\" check fixes that type of bug.\n\n\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\tthis.resetFormat();\n\t\t\t\tthis.chosenFormat = format;\n\t\t\t\t// Set `this.template` and `this.populatedNationalNumberTemplate`.\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (this.createFormattingTemplate(format)) {\n\t\t\t\t\t// Populate `this.populatedNationalNumberTemplate` with phone number digits.\n\t\t\t\t\tthis.reformatNationalNumber();\n\t\t\t\t} else {\n\t\t\t\t\t// If the formatting template couldn't be created for a format,\n\t\t\t\t\t// create it manually from the formatted phone number.\n\t\t\t\t\t// This case doesn't ever happen with the current metadata.\n\t\t\t\t\tthis.template = this.getFullNumber(formattedNationalNumber).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\tthis.populatedNationalNumberTemplate = formattedNationalNumber;\n\t\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.length - 1;\n\t\t\t\t}\n\t\t\t\treturn formattedNationalNumber;\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode ` in case of an international phone number\n\n\t}, {\n\t\tkey: 'getFullNumber',\n\t\tvalue: function getFullNumber(formattedNationalNumber) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\treturn '+' + this.digits;\n\t\t\t\t}\n\t\t\t\tif (!formattedNationalNumber) {\n\t\t\t\t\treturn '+' + this.countryCallingCode;\n\t\t\t\t}\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n\t\t\t}\n\t\t\treturn formattedNationalNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getNonFormattedNationalNumber',\n\t\tvalue: function getNonFormattedNationalNumber() {\n\t\t\treturn this.nationalPrefix + (this.nationalPrefix && this.nationalNumberDigits && this.getSeparatorAfterNationalPrefix()) + this.nationalNumberDigits;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extractCountryCallingCode',\n\t\tvalue: function extractCountryCallingCode() {\n\t\t\tvar _extractCountryCallin = _extractCountryCallingCode('+' + this.digits, this.defaultCountry, this.metadata.metadata),\n\t\t\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t\t\t    number = _extractCountryCallin.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.nationalNumberDigits = number;\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\tthis.initializePhoneNumberFormatsForCountry();\n\t\t\tthis.resetFormat();\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extractNationalPrefix',\n\t\tvalue: function extractNationalPrefix() {\n\t\t\tthis.nationalPrefix = '';\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\t\t\tvar _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(this.nationalNumberDigits, this.metadata),\n\t\t\t    potentialNationalNumber = _stripNationalPrefixA.number,\n\t\t\t    carrierCode = _stripNationalPrefixA.carrierCode;\n\n\t\t\t// Sometimes `stripNationalPrefixAndCarrierCode()` won't actually\n\t\t\t// strip national prefix and will instead prepend some digits to the `number`:\n\t\t\t// for example, when number `2345678` is passed with `VI` country selected,\n\t\t\t// it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\n\t\t\t// So check if the `potentialNationalNumber` is actually at the end of `this.nationalNumberDigits`.\n\n\n\t\t\tif (potentialNationalNumber) {\n\t\t\t\tvar index = this.nationalNumberDigits.indexOf(potentialNationalNumber);\n\t\t\t\tif (index < 0 || index !== this.nationalNumberDigits.length - potentialNationalNumber.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (carrierCode) {\n\t\t\t\tthis.carrierCode = carrierCode;\n\t\t\t}\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\t\t\tif (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumberDigits) && !this.isPossibleNumber(potentialNationalNumber)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif (matchesEntirely(this.nationalNumberDigits, this.metadata.nationalNumberPattern()) && !matchesEntirely(potentialNationalNumber, this.metadata.nationalNumberPattern())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.nationalPrefix = this.nationalNumberDigits.slice(0, this.nationalNumberDigits.length - potentialNationalNumber.length);\n\t\t\tthis.nationalNumberDigits = potentialNationalNumber;\n\t\t\treturn this.nationalPrefix;\n\t\t}\n\t}, {\n\t\tkey: 'isPossibleNumber',\n\t\tvalue: function isPossibleNumber(number) {\n\t\t\tvar validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.isInternational()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'isCountryCallingCodeAmbiguous',\n\t\tvalue: function isCountryCallingCodeAmbiguous() {\n\t\t\treturn this.metadata.countryCallingCodes()[this.countryCallingCode].length > 1;\n\t\t}\n\t}, {\n\t\tkey: 'createFormattingTemplate',\n\t\tvalue: function createFormattingTemplate(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.getTemplateForNumberFormatPattern(format, this.nationalPrefix);\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.template = template;\n\t\t\tthis.populatedNationalNumberTemplate = template;\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\treturn this.template;\n\t\t}\n\n\t\t/**\r\n   * Generates formatting template for a national phone number,\r\n   * optionally containing a national prefix, for a format.\r\n   * @param  {Format} format\r\n   * @param  {string} nationalPrefix\r\n   * @return {string}\r\n   */\n\n\t}, {\n\t\tkey: 'getTemplateForNumberFormatPattern',\n\t\tvalue: function getTemplateForNumberFormatPattern(format, nationalPrefix) {\n\t\t\tvar pattern = format.pattern();\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n\t\t\t\tpattern = pattern\n\t\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n\t\t\t}\n\n\t\t\t// Generate a dummy national number (consisting of `9`s)\n\t\t\t// that fits this format's `pattern`.\n\t\t\t//\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\t//\n\t\t\tvar digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.nationalNumberDigits.length > digits.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strictPattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strictPattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.nationalNumberDigits : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// format : `$1 $2 $3`\n\t\t\t// digits : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.nationalNumberDigits` has already sufficient length\n\t\t\t// to satisfy the `pattern` completely then `this.nationalNumberDigits`\n\t\t\t// is used instead of `digits`.\n\n\t\t\tvar strictPattern = new RegExp('^' + pattern + '$');\n\t\t\tvar nationalNumberDummyDigits = this.nationalNumberDigits.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.nationalNumberDigits` has already sufficient length\n\t\t\t// to satisfy the `pattern` completely then use it\n\t\t\t// instead of `digits`.\n\t\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\n\t\t\t\tdigits = nationalNumberDummyDigits;\n\t\t\t}\n\n\t\t\tvar numberFormat = this.getFormatFormat(format);\n\t\t\tvar includesNationalPrefix = void 0;\n\n\t\t\tif (nationalPrefix) {\n\t\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t\tvar numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t\tif (parseDigits(numberFormatWithNationalPrefix) === nationalPrefix + parseDigits(numberFormat)) {\n\t\t\t\t\t\tnumberFormat = numberFormatWithNationalPrefix;\n\t\t\t\t\t\tincludesNationalPrefix = true;\n\t\t\t\t\t\tvar i = nationalPrefix.length;\n\t\t\t\t\t\twhile (i > 0) {\n\t\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format.\n\t\t\tvar template = digits\n\t\t\t// Format the dummy phone number according to the format.\n\t\t\t.replace(new RegExp(pattern), numberFormat)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\n\t\t\tif (nationalPrefix) {\n\t\t\t\tif (!includesNationalPrefix) {\n\t\t\t\t\t// Prepend national prefix to the template manually.\n\t\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn template;\n\t\t}\n\t}, {\n\t\tkey: 'formatNextNationalNumberDigits',\n\t\tvalue: function formatNextNationalNumberDigits(digits) {\n\t\t\t// Using `.split('')` to iterate through a string here\n\t\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t\t// `.split('')` is generally not safe for Unicode,\n\t\t\t// but in this particular case for `digits` it is safe.\n\t\t\t// for (const digit of digits)\n\t\t\tfor (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i3++];\n\t\t\t\t} else {\n\t\t\t\t\t_i3 = _iterator3.next();\n\t\t\t\t\tif (_i3.done) break;\n\t\t\t\t\t_ref3 = _i3.value;\n\t\t\t\t}\n\n\t\t\t\tvar digit = _ref3;\n\n\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t// and return the formatted digits so far.\n\t\t\t\t// If more digits are entered than the current format could handle.\n\t\t\t\tif (this.populatedNationalNumberTemplate.slice(this.populatedNationalNumberTemplatePosition + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n\t\t\t\t\t// Reset the format.\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\tthis.populatedNationalNumberTemplate = this.populatedNationalNumberTemplate.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t}\n\n\t\t\t// Return the formatted phone number so far.\n\t\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1);\n\n\t\t\t// The old way which was good for `input-format` but is not so good\n\t\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n\t\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n\t\t}\n\t}, {\n\t\tkey: 'isInternational',\n\t\tvalue: function isInternational() {\n\t\t\treturn this.international;\n\t\t}\n\t}, {\n\t\tkey: 'getFormatFormat',\n\t\tvalue: function getFormatFormat(format) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn applyInternationalSeparatorStyle(format.internationalFormat());\n\t\t\t}\n\t\t\t// if (this.nationalPrefix) {\n\t\t\t// \treturn `\\\\d{${this.nationalPrefix.length}}` + this.getSeparatorAfterNationalPrefix() + format.format()\n\t\t\t// }\n\t\t\t// // If national prefix formatting rule is defined for\n\t\t\t// // this phone number format.\n\t\t\t// if (format.nationalPrefixFormattingRule()) {\n\t\t\t// \t// If the user did input the national prefix,\n\t\t\t// \t// or if the national prefix formatting rule\n\t\t\t// \t// does not use national prefix at all,\n\t\t\t// \t// and only uses \"nationalPrefixFormattingRule\"\n\t\t\t// \t// as a hack to format the number properly,\n\t\t\t// \t// then apply the \"nationalPrefixFormattingRule\".\n\t\t\t// \tif (format.usesNationalPrefix() && !this.nationalPrefix) {\n\t\t\t// \t\t// Don't use \"nationalPrefixFormattingRule\"\n\t\t\t// \t\t// because it assumes that national prefix is present,\n\t\t\t// \t\t// but it hasn't been input.\n\t\t\t// \t} else {\n\t\t\t// \t\treturn format.format().replace(\n\t\t\t// \t\t\tFIRST_GROUP_PATTERN,\n\t\t\t// \t\t\tformat.nationalPrefixFormattingRule()\n\t\t\t// \t\t)\n\t\t\t// \t}\n\t\t\t// }\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determineTheCountry',\n\t\tvalue: function determineTheCountry() {\n\t\t\tthis.country = findCountryCode(this.countryCallingCode, this.nationalNumberDigits, this.metadata);\n\t\t}\n\n\t\t/**\r\n   * Returns an instance of `PhoneNumber` class.\r\n   * Will return `undefined` if no national (significant) number\r\n   * digits have been entered so far, or if no `defaultCountry` has been\r\n   * set and the user enters a phone number not in international format.\r\n   */\n\n\t}, {\n\t\tkey: 'getNumber',\n\t\tvalue: function getNumber() {\n\t\t\tif (!(this.countryCallingCode || this.defaultCountry) || !this.nationalNumberDigits) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tvar phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumberDigits, this.metadata.metadata);\n\t\t\tif (this.carrierCode) {\n\t\t\t\tphoneNumber.carrierCode = this.carrierCode;\n\t\t\t}\n\t\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\t\treturn phoneNumber;\n\t\t}\n\n\t\t/**\r\n   * @deprecated\r\n   * This method is used in `react-phone-number-input/source/input-control.js`\r\n   * in versions before `3.0.16`.\r\n   */\n\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.nationalNumberDigits;\n\t\t}\n\t}, {\n\t\tkey: 'getNonFormattedTemplate',\n\t\tvalue: function getNonFormattedTemplate() {\n\t\t\treturn this.getFullNumber(this.getNonFormattedNationalNumber()).replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n\t\t}\n\n\t\t/**\r\n   * Returns formatted phone number template.\r\n   * @return {string} [template]\r\n   */\n\n\t}, {\n\t\tkey: 'getTemplate',\n\t\tvalue: function getTemplate() {\n\t\t\tif (!this.template) {\n\t\t\t\treturn this.getNonFormattedTemplate();\n\t\t\t}\n\t\t\tvar index = -1;\n\t\t\tvar i = 0;\n\t\t\twhile (i < (this.international ? 1 : 0) + this.digits.length) {\n\t\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn cutAndStripNonPairedParens(this.template, index + 1);\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexport default AsYouType;\n\n\nexport function stripNonPairedParens(string) {\n\tvar dangling_braces = [];\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i);\n\t\t} else if (string[i] === ')') {\n\t\t\tdangling_braces.pop();\n\t\t}\n\t\ti++;\n\t}\n\tvar start = 0;\n\tvar cleared_string = '';\n\tdangling_braces.push(string.length);\n\tfor (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray4) {\n\t\t\tif (_i4 >= _iterator4.length) break;\n\t\t\t_ref4 = _iterator4[_i4++];\n\t\t} else {\n\t\t\t_i4 = _iterator4.next();\n\t\t\tif (_i4.done) break;\n\t\t\t_ref4 = _i4.value;\n\t\t}\n\n\t\tvar index = _ref4;\n\n\t\tcleared_string += string.slice(start, index);\n\t\tstart = index + 1;\n\t}\n\treturn cleared_string;\n}\n\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n\tif (string[cutBeforeIndex] === ')') {\n\t\tcutBeforeIndex++;\n\t}\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\n\nexport function closeNonPairedParens(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\tvar opening_braces = countOccurences('(', retained_template);\n\tvar closing_braces = countOccurences(')', retained_template);\n\tvar dangling_braces = opening_braces - closing_braces;\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nexport function countOccurences(symbol, string) {\n\tvar count = 0;\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray5) {\n\t\t\tif (_i5 >= _iterator5.length) break;\n\t\t\t_ref5 = _iterator5[_i5++];\n\t\t} else {\n\t\t\t_i5 = _iterator5.next();\n\t\t\tif (_i5.done) break;\n\t\t\t_ref5 = _i5.value;\n\t\t}\n\n\t\tvar character = _ref5;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\tvar result = '';\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map","import Metadata from './metadata';\n\nexport default function getCountries(metadata) {\n\treturn new Metadata(metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(country, international, metadata) {\n  return country && international ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}\n//# sourceMappingURL=inputValuePrefix.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\n\nexport function createInput(defaultMetadata) {\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"international\", \"metadata\"]);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix(country, international, metadata); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();\n//# sourceMappingURL=InputSmart.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"country\", \"international\", \"metadata\", \"inputComponent\"]);\n\n    var prefix = getInputValuePrefix(country, international, metadata);\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}\n//# sourceMappingURL=InputBasic.js.map","import AsYouType from './AsYouType';\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\nexport default function FlagComponent(_ref) {\n  var country = _ref.country,\n      countryName = _ref.countryName,\n      flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      rest = _objectWithoutProperties(_ref, [\"country\", \"countryName\", \"flags\", \"flagUrl\"]);\n\n  if (flags && flags[country]) {\n    return flags[country]({\n      title: countryName\n    });\n  }\n\n  return React.createElement(\"img\", _extends({}, rest, {\n    alt: countryName,\n    src: flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())\n  }));\n}\nFlagComponent.propTypes = {\n  // The country to be selected by default.\n  // Two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: PropTypes.string.isRequired,\n  // Will be HTML `title` attribute of the `<img/>`.\n  countryName: PropTypes.string.isRequired,\n  // Country flag icon components.\n  // By default flag icons are inserted as `<img/>`s\n  // with their `src` pointed to `country-flag-icons` github pages website.\n  // There might be cases (e.g. an offline application)\n  // where having a large (3 megabyte) `<svg/>` flags\n  // bundle is more appropriate.\n  // `import flags from 'react-phone-number-input/flags'`.\n  flags: PropTypes.objectOf(PropTypes.elementType),\n  // A URL for a country flag icon.\n  // By default it points to `country-flag-icons` github pages website.\n  flagUrl: PropTypes.string.isRequired\n};\n//# sourceMappingURL=Flag.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default function InternationalIcon(_ref) {\n  var aspectRatio = _ref.aspectRatio,\n      rest = _objectWithoutProperties(_ref, [\"aspectRatio\"]);\n\n  if (aspectRatio === 1) {\n    return React.createElement(InternationalIcon1x1, rest);\n  } else {\n    return React.createElement(InternationalIcon3x2, rest);\n  }\n}\nInternationalIcon.propTypes = {\n  title: PropTypes.string.isRequired,\n  aspectRatio: PropTypes.number\n}; // 3x2.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon3x2(_ref2) {\n  var title = _ref2.title,\n      rest = _objectWithoutProperties(_ref2, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 75 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeMiterlimit: \"10\"\n  }, React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"\n  }), React.createElement(\"path\", {\n    d: \"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"\n  }), React.createElement(\"line\", {\n    x1: \"26\",\n    y1: \"25\",\n    x2: \"74\",\n    y2: \"25\"\n  }), React.createElement(\"line\", {\n    x1: \"50\",\n    y1: \"1\",\n    x2: \"50\",\n    y2: \"49\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"none\",\n    fill: \"currentColor\",\n    d: \"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"\n  }));\n}\n\nInternationalIcon3x2.propTypes = {\n  title: PropTypes.string.isRequired\n}; // 1x1.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon1x1(_ref3) {\n  var title = _ref3.title,\n      rest = _objectWithoutProperties(_ref3, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\"\n  }, React.createElement(\"path\", {\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), React.createElement(\"path\", {\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), React.createElement(\"path\", {\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), React.createElement(\"path\", {\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), React.createElement(\"line\", {\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), React.createElement(\"line\", {\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}\n\nInternationalIcon1x1.propTypes = {\n  title: PropTypes.string.isRequired\n};\n//# sourceMappingURL=InternationalIcon.js.map","import { isSupportedCountry } from 'libphonenumber-js/core';\nexport { getCountries } from 'libphonenumber-js/core';\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\n\nexport function sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  var _loop = function _loop() {\n    if (_isArray) {\n      if (_i >= _iterator.length) return \"break\";\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) return \"break\";\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      // Find the position of the option.\n      var index = options.indexOf(options.filter(function (option) {\n        return option.value === element;\n      })[0]); // Get the option.\n\n      var option = options[index]; // Remove the option from its default position.\n\n      options.splice(index, 1); // Add the option on top.\n\n      appendTo.push(option);\n    }\n  };\n\n  for (var _iterator = order, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    var _ret = _loop();\n\n    if (_ret === \"break\") break;\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nexport function getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '|':\n        case '...':\n        case '…':\n          return true;\n\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nexport function isCountrySupportedWithError(country, metadata) {\n  if (isSupportedCountry(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nexport function getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}\n//# sourceMappingURL=countries.js.map","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DefaultInternationalIcon from './InternationalIcon';\nimport Flag from './Flag';\nexport function createCountryIconComponent(_ref) {\n  var flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      FlagComponent = _ref.flagComponent,\n      InternationalIcon = _ref.internationalIcon;\n\n  function CountryIcon(_ref2) {\n    var country = _ref2.country,\n        label = _ref2.label,\n        aspectRatio = _ref2.aspectRatio;\n\n    // `aspectRatio` is currently a hack for the default \"International\" icon\n    // to render it as a square when Unicode flag icons are used.\n    // So `aspectRatio` property is only used with the default \"International\" icon.\n    var _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined;\n\n    return React.createElement(\"div\", {\n      className: classNames('PhoneInputCountryIcon', {\n        'PhoneInputCountryIcon--square': _aspectRatio === 1,\n        'PhoneInputCountryIcon--border': country\n      })\n    }, country ? React.createElement(FlagComponent, {\n      country: country,\n      countryName: label,\n      flags: flags,\n      flagUrl: flagUrl,\n      className: \"PhoneInputCountryIconImg\"\n    }) : React.createElement(InternationalIcon, {\n      title: label,\n      aspectRatio: _aspectRatio,\n      className: \"PhoneInputCountryIconImg\"\n    }));\n  }\n\n  CountryIcon.propTypes = {\n    country: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    aspectRatio: PropTypes.number\n  };\n  return CountryIcon;\n}\nexport default createCountryIconComponent({\n  // Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\n  flagUrl: 'https://catamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  flagComponent: Flag,\n  internationalIcon: DefaultInternationalIcon\n});\n//# sourceMappingURL=CountryIcon.js.map","import PropTypes from 'prop-types';\nexport var metadata = PropTypes.shape({\n  country_calling_codes: PropTypes.object.isRequired,\n  countries: PropTypes.object.isRequired\n});\nexport var labels = PropTypes.objectOf(PropTypes.string);\n//# sourceMappingURL=PropTypes.js.map","import { parsePhoneNumberFromString, getCountryCallingCode, AsYouType, Metadata } from 'libphonenumber-js/core';\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\nexport function getPreSelectedCountry(phoneNumber, country, countries, includeInternationalOption, metadata) {\n  // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && !includeInternationalOption && countries && countries.length > 0) {\n    country = countries[0];\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\nexport function getCountrySelectOptions(countries, country_names, includeInternationalOption) {\n  // Generates a `<Select/>` option for each country.\n  var country_select_options = countries.map(function (country) {\n    return {\n      value: country,\n      label: country_names[country]\n    };\n  }); // Sort the list of countries alphabetically.\n\n  country_select_options.sort(function (a, b) {\n    return compare_strings(a.label, b.label);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (includeInternationalOption) {\n    country_select_options.unshift({\n      label: country_names.ZZ\n    });\n  }\n\n  return country_select_options;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\nexport function parsePhoneNumber(value, metadata) {\n  return parsePhoneNumberFromString(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\nexport function generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\r\n * @param {string?} previousCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\nexport function migrateParsedInputForNewCountry(value, previous_country, new_country, metadata, preferNationalFormat) {\n  // If `parsed_input` is empty\n  // then no need to migrate anything.\n  if (!value) {\n    return value;\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `value` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (new_country) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (value[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (preferNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata)\n        // if (derived_country === new_country)\n        // {\n        // \treturn strip_country_calling_code(value, derived_country, metadata)\n        // }\n        // Actually, the two countries don't necessarily need to match:\n        // the condition could be looser here, because several countries\n        // might share the same international phone number format\n        // (for example, \"NANPA\" countries like US, Canada, etc).\n        // The looser condition would be just \"same nternational phone number format\"\n        // which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n        if (value.indexOf('+' + getCountryCallingCode(new_country, metadata)) === 0) {\n          return strip_country_calling_code(value, new_country, metadata);\n        } // Simply discard the previously entered international phone number,\n        // because otherwise any \"smart\" transformation like getting the\n        // \"national (significant) number\" part and then prepending the\n        // newly selected country's \"country calling code\" to it\n        // would just be confusing for a user without being actually useful.\n\n\n        return ''; // // Simply strip the leading `+` character\n        // // therefore simply converting all digits into a \"local\" phone number.\n        // // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        // return value.slice(1)\n      } // If the international phone number already contains\n      // any country calling code then trim the country calling code part.\n      // (that could also be the newly selected country phone code prefix as well)\n      // `value` doesn't neccessarily belong to `previous_country`.\n      // (e.g. if a user enters an international number\n      //  not belonging to any of the reduced `countries` list).\n\n\n      value = strip_country_calling_code(value, previous_country, metadata); // Prepend country calling code prefix\n      // for the newly selected country.\n\n      return e164(value, new_country, metadata) || \"+\".concat(getCountryCallingCode(new_country, metadata));\n    }\n  } // If switching to \"International\" from a country.\n  else {\n      // If the phone number was entered in national format.\n      if (value[0] !== '+') {\n        // Format the national phone number as an international one.\n        // The phone number entered not necessarily even starts with\n        // the previously selected country phone prefix.\n        // Even if the phone number belongs to whole another country\n        // it will still be parsed into some national phone number.\n        return e164(value, previous_country, metadata) || '';\n      }\n    }\n\n  return value;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nexport function e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // If there are any digits then the `value` is returned as is.\n\n\n    return number;\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (partial_national_significant_number) {\n    return \"+\".concat(getCountryCallingCode(country, metadata)).concat(partial_national_significant_number);\n  }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\nexport function trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (nationalSignificantNumberPart) {\n    var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n    if (overflowDigitsCount > 0) {\n      return number.slice(0, number.length - overflowDigitsCount);\n    }\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new Metadata(metadata);\n  metadata.country(country); // Return the last \"possible length\".\n\n  return metadata.possibleLengths()[metadata.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryForPartialE164Number(partialE164Number, country, countries, includeInternationalOption, metadata) {\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = get_country_from_possibly_incomplete_international_phone_number(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && includeInternationalOption && !could_number_belong_to_country(partialE164Number, country, metadata)) {\n      return undefined;\n    } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} input — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevInput — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\nexport function parseInput(input, prevInput, country, defaultCountry, countries, includeInternationalOption, limitMaxLength, metadata) {\n  // Trim the input to not exceed the maximum possible number length.\n  if (input && country && limitMaxLength) {\n    input = trimNumber(input, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n\n\n  if (input && !country && input[0] !== '+') {\n    input = '+' + input;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!input && prevInput && prevInput[0] === '+') {\n    country = defaultCountry;\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (input === '+' && prevInput && prevInput[0] === '+' && prevInput.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value;\n\n  if (input) {\n    if (input[0] === '+') {\n      if (input !== '+') {\n        value = input;\n      }\n    } else {\n      value = e164(input, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, country, countries, includeInternationalOption, metadata);\n  }\n\n  return {\n    input: input,\n    country: country,\n    value: value\n  };\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nexport function get_country_from_possibly_incomplete_international_phone_number(number, metadata) {\n  var formatter = new AsYouType(null, metadata);\n  formatter.input(number); // `001` is a special \"non-geograpical entity\" code\n  // in Google's `libphonenumber` library.\n\n  if (formatter.country === '001') {\n    return;\n  }\n\n  return formatter.country;\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n */\n\nexport function compare_strings(a, b) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\nexport function strip_country_calling_code(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var country_calling_prefix = '+' + getCountryCallingCode(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < country_calling_prefix.length) {\n      if (country_calling_prefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(country_calling_prefix) === 0) {\n        return number.slice(country_calling_prefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _i = 0, _Object$keys = Object.keys(metadata.country_calling_codes); _i < _Object$keys.length; _i++) {\n    var country_calling_code = _Object$keys[_i];\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\n\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  var phoneNumber = formatter.getNumber();\n  return phoneNumber && phoneNumber.nationalNumber;\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\nexport function could_number_belong_to_country(number, country, metadata) {\n  var country_calling_code = getCountryCallingCode(country, metadata);\n  var i = 0;\n\n  while (i + 1 < number.length && i < country_calling_code.length) {\n    if (number[i + 1] !== country_calling_code[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n//# sourceMappingURL=phoneInputHelpers.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nimport Flag from './Flag';\nimport InternationalIcon from './InternationalIcon';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './countries';\nimport { createCountryIconComponent } from './CountryIcon';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport { getPreSelectedCountry, getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, migrateParsedInputForNewCountry, getCountryForPartialE164Number, parseInput, e164 } from './phoneInputHelpers';\n\nvar PhoneNumberInput_ =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PhoneNumberInput_).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange;\n      var _this$state = _this.state,\n          prevParsedInput = _this$state.parsedInput,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newParsedInput = migrateParsedInputForNewCountry(prevParsedInput, prevCountry, newCountry, metadata, // Convert the phone number to \"national\" format\n      // when the user changes the selected country by hand.\n      true);\n      var newValue = e164(newParsedInput, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      _this.getInputRef().current.focus(); // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        parsedInput: newParsedInput,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_input) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          limitMaxLength = _this$props2.limitMaxLength,\n          metadata = _this$props2.metadata;\n\n      var _parseInput = parseInput(_input, _this.state.parsedInput, _this.state.country, defaultCountry, _this.state.countries, addInternationalOption, limitMaxLength, metadata),\n          input = _parseInput.input,\n          country = _parseInput.country,\n          value = _parseInput.value;\n\n      _this.setState({\n        parsedInput: input,\n        value: value,\n        country: country\n      }, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        _metadata = _this$props3.metadata,\n        countryOptionsOrder = _this$props3.countryOptionsOrder;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    countries = getSupportedCountries(countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: getPreSelectedCountry(phoneNumber, _defaultCountry, countries || getCountries(_metadata), _addInternationalOption, _metadata),\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: countries,\n      // `parsedInput` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value`is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `parsedInput` is `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `parsedInput` is `+78005553535`.\n      parsedInput: generateParsedInput(_value, phoneNumber, _this.props),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `parsedInput` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `parsedInput` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"getInputRef\",\n    value: function getInputRef() {\n      var inputRef = this.props.inputRef;\n      return inputRef || this.inputRef;\n    } // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `parsedInput` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          name = _this$props5.name,\n          disabled = _this$props5.disabled,\n          autoComplete = _this$props5.autoComplete,\n          style = _this$props5.style,\n          className = _this$props5.className,\n          inputRef = _this$props5.inputRef,\n          inputComponent = _this$props5.inputComponent,\n          numberInputProps = _this$props5.numberInputProps,\n          smartCaret = _this$props5.smartCaret,\n          CountrySelectComponent = _this$props5.countrySelectComponent,\n          countrySelectProps = _this$props5.countrySelectProps,\n          defaultCountry = _this$props5.defaultCountry,\n          countries = _this$props5.countries,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          labels = _this$props5.labels,\n          flags = _this$props5.flags,\n          flagComponent = _this$props5.flagComponent,\n          flagUrl = _this$props5.flagUrl,\n          addInternationalOption = _this$props5.addInternationalOption,\n          internationalIcon = _this$props5.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props5.displayInitialValueAsLocalNumber,\n          onCountryChange = _this$props5.onCountryChange,\n          limitMaxLength = _this$props5.limitMaxLength,\n          reset = _this$props5.reset,\n          metadata = _this$props5.metadata,\n          rest = _objectWithoutProperties(_this$props5, [\"name\", \"disabled\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"onCountryChange\", \"limitMaxLength\", \"reset\", \"metadata\"]);\n\n      var _this$state2 = this.state,\n          country = _this$state2.country,\n          parsedInput = _this$state2.parsedInput,\n          isFocused = _this$state2.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(getCountrySelectOptions(countries || getCountries(metadata), labels, addInternationalOption), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n      return React.createElement(\"div\", {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused\n        })\n      }, React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        iconComponent: this.CountryIcon\n      })), React.createElement(InputComponent, _extends({\n        ref: this.getInputRef(),\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: parsedInput || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var country = state.country,\n          hasUserSelectedACountry = state.hasUserSelectedACountry,\n          value = state.value,\n          _state$props = state.props,\n          prevDefaultCountry = _state$props.defaultCountry,\n          prevValue = _state$props.value,\n          prevReset = _state$props.reset;\n      var metadata = props.metadata,\n          countries = props.countries,\n          newDefaultCountry = props.defaultCountry,\n          newValue = props.value,\n          newReset = props.reset;\n      var newState = {\n        // Emulate `prevProps` via `state.props`.\n        props: props,\n        // If the user has already manually selected a country\n        // then don't override that already selected country\n        // if the `defaultCountry` property changes.\n        // That's what `hasUserSelectedACountry` flag is for.\n        hasUserSelectedACountry: hasUserSelectedACountry\n      }; // Some users requested a way to reset the component\n      // (both number `<input/>` and country `<select/>`).\n      // Whenever `reset` property changes both number `<input/>`\n      // and country `<select/>` are reset.\n      // It's not implemented as some instance `.reset()` method\n      // because `ref` is forwarded to `<input/>`.\n      // It's also not replaced with just resetting `country` on\n      // external `value` reset, because a user could select a country\n      // and then not input any `value`, and so the selected country\n      // would be \"stuck\", if not using this `reset` property.\n      // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n      if (newReset !== prevReset) {\n        return _objectSpread({}, newState, {\n          parsedInput: undefined,\n          value: undefined,\n          country: newDefaultCountry,\n          hasUserSelectedACountry: undefined\n        });\n      } // If the default country changed.\n      // (e.g. in case of ajax GeoIP detection after page loaded)\n      // then select it but only if the user hasn't already manually\n      // selected a country and no phone number has been entered so far.\n      // Because if the user has already started inputting a phone number\n      // then he's okay with no country being selected at all (\"International\")\n      // and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\n\n      if (newDefaultCountry !== prevDefaultCountry && !hasUserSelectedACountry && !value && !newValue) {\n        return _objectSpread({}, newState, {\n          country: isCountrySupportedWithError(newDefaultCountry, metadata) ? newDefaultCountry : prevDefaultCountry // `value` is `undefined`.\n          // `parsedInput` is `undefined` because `value` is `undefined`.\n\n        });\n      } // If a new `value` is set externally.\n      // (e.g. as a result of an ajax API request\n      //  to get user's phone after page loaded)\n      // The first part — `newValue !== prevValue` —\n      // is basically `props.value !== prevProps.value`\n      // so it means \"if value property was changed externally\".\n      // The second part — `newValue !== value` —\n      // is for ignoring the `getDerivedStateFromProps()` call\n      // which happens in `this.onChange()` right after `this.setState()`.\n      // If this `getDerivedStateFromProps()` call isn't ignored\n      // then the country flag would reset on each input.\n      else if (newValue !== prevValue && newValue !== value) {\n          var phoneNumber = parsePhoneNumber(newValue, metadata);\n          var parsedCountry;\n\n          if (phoneNumber) {\n            var _countries = getSupportedCountries(props.countries, metadata);\n\n            if (!_countries || _countries.indexOf(phoneNumber.country) >= 0) {\n              parsedCountry = phoneNumber.country;\n            }\n          }\n\n          if (!newValue) {\n            newState.hasUserSelectedACountry = undefined;\n          }\n\n          return _objectSpread({}, newState, {\n            parsedInput: generateParsedInput(newValue, phoneNumber, props),\n            value: newValue,\n            country: newValue ? parsedCountry : newDefaultCountry\n          });\n        } // `defaultCountry` didn't change.\n      // `value` didn't change.\n      // `parsedInput` didn't change, because `value` didn't change.\n      //\n      // So no need to update state here really.\n      // Could as well return `null` explicitly\n      // to indicate that the `state` hasn't changed.\n      // But just in case, returns `newState`.\n      // (who knows if someone adds something\n      // changing `newState` above in some future)\n\n\n      return newState;\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = React.forwardRef(function (props, ref) {\n  return React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * Updates the `value` as the user inputs the phone number.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * `onKeyDown` handler (e.g. to handle Enter key press).\r\n   * @ignore\r\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\r\n   * Set to `true` to disable both the phone number `<input/>`\r\n   * and the country `<select/>`.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n\n  /**\r\n   * Set to `true` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if this flag is set to `true`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, this flag is set to `false`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `false` by default)\n  displayInitialValueAsLocalNumber: PropTypes.bool.isRequired,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: labelsPropType.isRequired,\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` github pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: PropTypes.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — means \"the rest of the countries\" (can be omitted, in which case it will automatically be added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: PropTypes.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: PropTypes.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: PropTypes.object,\n\n  /**\r\n   * By default, the caret position is being \"intelligently\" managed\r\n   * while a user inputs a phone number.\r\n   * This \"smart\" caret behavior can be turned off\r\n   * by passing `smartCaret={false}` property.\r\n   * This is just an \"escape hatch\" for any possible caret position issues.\r\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: metadataPropType.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n\n  /**\r\n   * By default, uses icons from `country-flag-icons` github pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://catamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n\n  /**\r\n   * Don't convert the initially passed phone number `value`\r\n   * to a national phone number for its country.\r\n   * The reason is that the newer generation grows up when\r\n   * there are no stationary phones and therefore everyone inputs\r\n   * phone numbers with a `+` in their smartphones\r\n   * so phone numbers written in international form\r\n   * are gradually being considered more natural than local ones.\r\n   */\n  displayInitialValueAsLocalNumber: false,\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false\n};\nexport default PhoneNumberInput;\n\nfunction generateParsedInput(value, phoneNumber, _ref) {\n  var displayInitialValueAsLocalNumber = _ref.displayInitialValueAsLocalNumber;\n\n  // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `displayInitialValueAsLocalNumber` property is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n  if (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  }\n\n  return value;\n}\n\nvar countrySelectOptionsMemo;\nvar countrySelectOptionsMemoDependencies;\n\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n  if (!countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n    countrySelectOptionsMemo = generator();\n    countrySelectOptionsMemoDependencies = dependencies;\n  }\n\n  return countrySelectOptionsMemo;\n}\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n//# sourceMappingURL=PhoneInputWithCountry.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/core';\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\nexport function formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n//# sourceMappingURL=formatPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isValidPhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isValid();\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isPossiblePhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isPossible();\n}\n//# sourceMappingURL=isPossiblePhoneNumber.js.map","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\nexport default function getCountryFlag(country) {\n  return getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1]);\n}\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\n\nfunction getRegionalIndicatorSymbol(letter) {\n  return String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0));\n}\n//# sourceMappingURL=unicode.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode';\nexport default function CountrySelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"options\"]);\n\n  var onChange_ = useCallback(function (event) {\n    var value = event.target.value;\n    onChange(value === 'ZZ' ? undefined : value);\n  }, [onChange]);\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]); // \"ZZ\" means \"International\".\n  // (HTML requires each `<option/>` have some string `value`).\n\n  return React.createElement(\"select\", _extends({}, rest, {\n    value: value || 'ZZ',\n    onChange: onChange_\n  }), options.map(function (_ref2) {\n    var value = _ref2.value,\n        label = _ref2.label,\n        divider = _ref2.divider;\n    return React.createElement(\"option\", {\n      key: divider ? '|' : value || 'ZZ',\n      value: divider ? '|' : value || 'ZZ',\n      disabled: divider ? true : false,\n      style: divider ? DIVIDER_STYLE : undefined\n    }, label);\n  }));\n}\nCountrySelect.propTypes = {\n  /**\r\n   * A two-letter country code.\r\n   * Example: \"US\", \"RU\", etc.\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * Updates the `value`.\r\n   */\n  onChange: PropTypes.func.isRequired,\n  // `<select/>` options.\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string,\n    divider: PropTypes.bool\n  })).isRequired\n};\nvar DIVIDER_STYLE = {\n  fontSize: '1px',\n  backgroundColor: 'currentColor',\n  color: 'inherit'\n};\nexport function CountrySelectWithIcon(_ref3) {\n  var value = _ref3.value,\n      options = _ref3.options,\n      className = _ref3.className,\n      Icon = _ref3.iconComponent,\n      getIconAspectRatio = _ref3.getIconAspectRatio,\n      Arrow = _ref3.arrowComponent,\n      unicodeFlags = _ref3.unicodeFlags,\n      rest = _objectWithoutProperties(_ref3, [\"value\", \"options\", \"className\", \"iconComponent\", \"getIconAspectRatio\", \"arrowComponent\", \"unicodeFlags\"]);\n\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]);\n  return React.createElement(\"div\", {\n    className: \"PhoneInputCountry\"\n  }, React.createElement(CountrySelect, _extends({}, rest, {\n    value: value,\n    options: options,\n    className: classNames('PhoneInputCountrySelect', className)\n  })), unicodeFlags && value && React.createElement(\"div\", {\n    className: \"PhoneInputCountryIconUnicode\"\n  }, getUnicodeFlagIcon(value)), !(unicodeFlags && value) && React.createElement(Icon, {\n    country: value,\n    label: selectedOption && selectedOption.label,\n    aspectRatio: unicodeFlags ? 1 : undefined\n  }), React.createElement(Arrow, null));\n}\nCountrySelectWithIcon.propTypes = {\n  // Country flag component.\n  iconComponent: PropTypes.elementType,\n  // Select arrow component.\n  arrowComponent: PropTypes.elementType.isRequired,\n  // Set to `true` to render Unicode flag icons instead of SVG images.\n  unicodeFlags: PropTypes.bool\n};\nCountrySelectWithIcon.defaultProps = {\n  // Is \"International\" icon square?\n  arrowComponent: function arrowComponent() {\n    return React.createElement(\"div\", {\n      className: \"PhoneInputCountrySelectArrow\"\n    });\n  }\n};\n\nfunction getSelectedOption(options, value) {\n  for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref4 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref4 = _i.value;\n    }\n\n    var option = _ref4;\n\n    if (!option.divider && option.value === value) {\n      return option;\n    }\n  }\n}\n//# sourceMappingURL=CountrySelect.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport labels from '../locale/en.json';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport PhoneInput from './PhoneInputWithCountry';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect';\nexport function createPhoneInput(defaultMetadata) {\n  var PhoneInputDefault = React.forwardRef(function (props, ref) {\n    return React.createElement(PhoneInput, _extends({\n      ref: ref\n    }, props));\n  });\n  PhoneInputDefault.propTypes = {\n    metadata: metadataPropType.isRequired,\n    labels: labelsPropType.isRequired,\n    countrySelectComponent: PropTypes.elementType.isRequired\n  };\n  PhoneInputDefault.defaultProps = {\n    metadata: defaultMetadata,\n    labels: labels,\n    countrySelectComponent: CountrySelect\n  };\n  return PhoneInputDefault;\n}\nexport default createPhoneInput();\n//# sourceMappingURL=PhoneInputWithCountryDefault.js.map","import metadata from 'libphonenumber-js/metadata.full.json'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode\r\n} from '../core/index'\r\n\r\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createPhoneInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","apply","key","call","join","module","exports","window","Object","defineProperty","value","text","caret_position","parse_character","focused_input_character_index","index","character","undefined","caret","operation","slice","symbol","string","count","_iterator","split","_isArray","_i","Symbol","iterator","_ref","next","done","retained_template","template","placeholder","empty_placeholder","cut_before","opening_braces","_helpers","count_occurences","closing_braces","dangling_braces","replace","should_close_braces","characters_in_template","value_character_index","filled_in_template","_closeBraces2","default","obj","_closeBraces","__esModule","formatter","_templateFormatter2","found","possibly_last_input_character_index","_templateFormatter","element","selectionStart","selectionEnd","start","end","event","keyCode","Keys","Backspace","Delete","navigator","ANDROID_USER_AGENT_REG_EXP","test","userAgent","isAndroid","setSelectionRange","setTimeout","input","_parse","_format","on_change","format_input_text","selection","_dom","getSelection","erase_selection","getOperation","preventDefault","_edit2","_interopRequireDefault","_edit","_parse4","_parse3","_format3","_format2","setCaretPosition","_parse2","getCaretPosition","operation_applied","formatted","_extends","assign","target","source","prototype","_react2","_react","_propTypes2","_propTypes","Input","ref","parse","format","InputComponent","inputComponent","onChange","onCut","onPaste","onKeyDown","rest","keys","indexOf","_objectWithoutProperties","ownRef","useRef","_onChange","useCallback","_inputControl","current","_onPaste","_onCut","_onKeyDown","createElement","isEmptyValue","forwardRef","propTypes","func","isRequired","elementType","type","defaultProps","ParseError","code","instance","Constructor","TypeError","_classCallCheck","this","name","constructor","message","stack","Error","create","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","matchesEntirely","regular_expression","RegExp","_typeof","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","V3","Metadata","metadata","is_object","countries","country_calling_codes","country_phone_code_to_countries","type_of","validateMetadata","v1","version","v2","a","b","pa","pb","na","Number","nb","isNaN","compare","v3","filter","_","country","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","_this","formats","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","getType","Type","country_calling_code","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","possibleLengths","getCountryCallingCode","isSupportedCountry","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERN","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","parseDigits","result","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","NON_FIXED_LINE_PHONE_TYPES","getNumberType","options","nationalNumber","phone","nationalNumberPattern","is_of_type","pattern","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","sort","mergeArrays","actual_length","minimum_length","is_possible_number","national_number","is_international","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","_slicedToArray","arr","_arr","_n","_d","_e","_s","err","sliceIterator","DEFAULT_OPTIONS","formatExtension","formattedNumber","extension","ext","formatNumber","chooseCountryByCountryCallingCode","addExtension","formatNationalNumber","_ref2","formatRFC3966","fromCountry","IDDPrefix","countryMetadata","defaultIDDPrefix","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalSeparator","useNationalPrefixFormattingRule","internationalFormat","applyInternationalSeparatorStyle","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","search","chooseFormatForNumber","local","trim","PhoneNumber","isCountryCode","_metadata","isPossibleNumber","isValidNumber","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","defaultCountry","_parseInput","_part$split","_part$split2","parseRFC3966","extractFormattedPhoneNumber","with_extension_stripped","number_without_extension","matches","match","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","_extractCountryCallin","extractCountryCallingCode","_parseNationalNumber","carrierCode","_stripNationalPrefixA","stripNationalPrefixAndCarrierCode","potentialNationalNumber","potentialCarrierCode","parseNationalNumber","exactCountry","findCountryCode","parsePhoneNumber","selectedCountry","phoneNumber","valid","extended","possible","startsAt","nationalPrefixForParsing","prefixPattern","prefixMatch","exec","nationalSignificantNumber","capturedGroupsCount","nationalPrefixTransformRule","nationalPhoneNumber","possibleCountries","leadingDigits","_findCountryCode","numberWithoutIDD","IDDPrefixPattern","matchedGroups","stripIDDPrefix","isObject","parsePhoneNumberFromString","parseNumber","error","_normalizeArguments","args","_Array$prototype$slic","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","normalizeArguments","parsePhoneNumberFromString_","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","NATIONAL_PREFIX_SEPARATORS_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN","AsYouType","reset","formattedOutput","international","digits","nationalNumberDigits","setCountry","resetFormat","initializePhoneNumberFormatsForCountry","matchingFormats","chosenFormat","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","formattedDigits","extractFormattedDigits","getFullNumber","inputDigits","getNonFormattedNationalNumber","extractedNumber","startInternationalNumber","nextDigits","isInternational","isCountryCallingCodeAmbiguous","determineTheCountry","previousNationalPrefix","extractNationalPrefix","matchFormats","formatNationalNumberWithNextDigits","attemptToFormatCompletePhoneNumber","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","reformatNationalNumber","createFormattingTemplate","leadingDigitsPatternIndex","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","_iterator2","_isArray2","_i2","formattedNationalNumber","formattedNationalNumberWithNationalPrefix","getSeparatorAfterNationalPrefix","_extractCountryCallingCode","getTemplateForNumberFormatPattern","strictPattern","nationalNumberDummyDigits","numberFormat","getFormatFormat","includesNationalPrefix","numberFormatWithNationalPrefix","_iterator3","_isArray3","_i3","_ref3","cutAndStripNonPairedParens","getNonFormattedTemplate","cutBeforeIndex","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","stripNonPairedParens","times","getCountries","getInputValuePrefix","concat","removeInputValuePrefix","prefix","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","defaultMetadata","InputSmart","getTemplate","React","PropTypes","bool","object","createInput","InputBasic","newValue","formatIncompletePhoneNumber","FlagComponent","countryName","flags","flagUrl","title","alt","src","toLowerCase","InternationalIcon","aspectRatio","InternationalIcon1x1","InternationalIcon3x2","xmlns","viewBox","className","stroke","fill","strokeWidth","strokeMiterlimit","strokeLinecap","d","x1","y1","x2","y2","isCountrySupportedWithError","console","getSupportedCountries","createCountryIconComponent","flagComponent","internationalIcon","CountryIcon","label","_aspectRatio","DefaultInternationalIcon","PhoneInputCountryIcon--square","PhoneInputCountryIcon--border","objectOf","Flag","shape","labels","getPreSelectedCountry","includeInternationalOption","getCountrySelectOptions","country_names","country_select_options","String","localeCompare","compare_strings","unshift","ZZ","e164","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","derived_country","get_country_from_possibly_incomplete_international_phone_number","could_number_belong_to_country","strip_country_calling_code","country_calling_prefix","_Object$keys","getNumber","ownKeys","enumerableOnly","symbols","sym","getOwnPropertyDescriptor","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","_defineProperties","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","p","countrySelectOptionsMemo","countrySelectOptionsMemoDependencies","PhoneNumberInput_","_React$PureComponent","_possibleConstructorReturn","createRef","newCountry","_this$props","_this$state","state","newParsedInput","previous_country","new_country","preferNationalFormat","migrateParsedInputForNewCountry","parsedInput","getInputRef","focus","setState","hasUserSelectedACountry","_input","_this$props2","addInternationalOption","limitMaxLength","prevInput","isFocused","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","_this$props3","_value","_addInternationalOption","_this$props4","countryOptionsOrder","_defaultCountry","generateParsedInput","subClass","superClass","_inherits","_state$props","prevDefaultCountry","prevValue","prevReset","newDefaultCountry","newState","parsedCountry","_countries","onCountryChange","prevProps","prevState","inputRef","generator","dependencies","_this$props5","disabled","autoComplete","style","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","displayInitialValueAsLocalNumber","_this$state2","countrySelectOptions","order","optionsOnTop","optionsOnBottom","appendTo","_loop","divider","option","splice","sortCountryOptions","countryOptions","getSupportedCountryOptions","areEqualArrays","PhoneInput--focus","aria-label","onCountryFocus","onCountryBlur","iconComponent","PureComponent","PhoneNumberInput","formatNational","generateNationalNumberDigits","formatPhoneNumber","formatPhoneNumberIntl","isValidPhoneNumber","isValid","isPossiblePhoneNumber","isPossible","arrayOf","labelsPropType","metadataPropType","any","getRegionalIndicatorSymbol","letter","fromCodePoint","toUpperCase","charCodeAt","CountrySelect","onChange_","useMemo","getSelectedOption","DIVIDER_STYLE","fontSize","backgroundColor","color","CountrySelectWithIcon","Icon","Arrow","getIconAspectRatio","arrowComponent","unicodeFlags","selectedOption","getUnicodeFlagIcon","createPhoneInput","PhoneInputDefault","PhoneInput","_arguments","_formatPhoneNumber","_formatPhoneNumberIntl","_getCountries","_getCountryCallingCode","_isPossiblePhoneNumber","_isValidPhoneNumber"],"mappings":"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"}