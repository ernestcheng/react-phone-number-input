{"version":3,"file":"react-phone-number-input-input.js","sources":["../node_modules/input-format/modules/parse.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/helpers.js","../node_modules/input-format/modules/close braces.js","../node_modules/input-format/modules/template formatter.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/dom.js","../node_modules/input-format/modules/input control.js","../node_modules/input-format/modules/react/Input.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/util.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/extension.js","../node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/getNumberType_.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/IDD.js","../node_modules/libphonenumber-js/es6/RFC3966.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/getCountries.js","../modules/inputValuePrefix.js","../modules/InputSmart.js","../modules/InputBasic.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../modules/libphonenumber/formatPhoneNumber.js","../modules/libphonenumber/isValidPhoneNumber.js","../modules/libphonenumber/isPossiblePhoneNumber.js","../modules/PhoneInput.js","../input/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parse;\n// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nfunction parse(text, caret_position, parse_character) {\n\tvar value = '';\n\n\tvar focused_input_character_index = 0;\n\n\tvar index = 0;\n\twhile (index < text.length) {\n\t\tvar character = parse_character(text[index], value);\n\n\t\tif (character !== undefined) {\n\t\t\tvalue += character;\n\n\t\t\tif (caret_position !== undefined) {\n\t\t\t\tif (caret_position === index) {\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\n\t\t\t\t} else if (caret_position > index) {\n\t\t\t\t\tfocused_input_character_index = value.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tindex++;\n\t}\n\n\t// If caret position wasn't specified\n\tif (caret_position === undefined) {\n\t\t// Then set caret position to \"after the last input character\"\n\t\tfocused_input_character_index = value.length;\n\t}\n\n\tvar result = {\n\t\tvalue: value,\n\t\tcaret: focused_input_character_index\n\t};\n\n\treturn result;\n}\n//# sourceMappingURL=parse.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = edit;\n// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nfunction edit(value, caret, operation) {\n\tswitch (operation) {\n\t\tcase 'Backspace':\n\t\t\t// If there exists the previous character,\n\t\t\t// then erase it and reposition the caret.\n\t\t\tif (caret > 0) {\n\t\t\t\t// Remove the previous character\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret);\n\t\t\t\t// Position the caret where the previous (erased) character was\n\t\t\t\tcaret--;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Delete':\n\t\t\t// Remove current digit (if any)\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1);\n\t\t\tbreak;\n\t}\n\n\treturn { value: value, caret: caret };\n}\n//# sourceMappingURL=edit.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.count_occurences = count_occurences;\n// Counts all occurences of a symbol in a string\nfunction count_occurences(symbol, string) {\n\tvar count = 0;\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes)\n\t// but template placeholder characters don't fall into that range\n\t// so skipping such miscellaneous \"exotic\" characters\n\t// won't matter here for just counting placeholder character occurrences.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n//# sourceMappingURL=helpers.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = close_braces;\n\nvar _helpers = require('./helpers');\n\nfunction close_braces(retained_template, template) {\n\tvar placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n\tvar empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n\n\tvar cut_before = retained_template.length;\n\n\tvar opening_braces = (0, _helpers.count_occurences)('(', retained_template);\n\tvar closing_braces = (0, _helpers.count_occurences)(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\n\t\tcut_before++;\n\t}\n\n\treturn retained_template;\n}\n//# sourceMappingURL=close braces.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (template) {\n\tvar placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n\tvar should_close_braces = arguments[2];\n\n\tif (!template) {\n\t\treturn function (value) {\n\t\t\treturn { text: value };\n\t\t};\n\t}\n\n\tvar characters_in_template = (0, _helpers.count_occurences)(placeholder, template);\n\n\treturn function (value) {\n\t\tif (!value) {\n\t\t\treturn { text: '', template: template };\n\t\t}\n\n\t\tvar value_character_index = 0;\n\t\tvar filled_in_template = '';\n\n\t\t// Using `.split('')` here instead of normal `for ... of`\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t\t// (the ones consisting of four bytes)\n\t\t// but template placeholder characters don't fall into that range\n\t\t// and appending UTF-8 characters to a string in parts still works.\n\t\tfor (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\tvar _ref;\n\n\t\t\tif (_isArray) {\n\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t_ref = _iterator[_i++];\n\t\t\t} else {\n\t\t\t\t_i = _iterator.next();\n\t\t\t\tif (_i.done) break;\n\t\t\t\t_ref = _i.value;\n\t\t\t}\n\n\t\t\tvar character = _ref;\n\n\t\t\tif (character !== placeholder) {\n\t\t\t\tfilled_in_template += character;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfilled_in_template += value[value_character_index];\n\t\t\tvalue_character_index++;\n\n\t\t\t// If the last available value character has been filled in,\n\t\t\t// then return the filled in template\n\t\t\t// (either trim the right part or retain it,\n\t\t\t//  if no more character placeholders in there)\n\t\t\tif (value_character_index === value.length) {\n\t\t\t\t// If there are more character placeholders\n\t\t\t\t// in the right part of the template\n\t\t\t\t// then simply trim it.\n\t\t\t\tif (value.length < characters_in_template) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (should_close_braces) {\n\t\t\tfilled_in_template = (0, _closeBraces2.default)(filled_in_template, template);\n\t\t}\n\n\t\treturn { text: filled_in_template, template: template };\n\t};\n};\n\nvar _helpers = require('./helpers');\n\nvar _closeBraces = require('./close braces');\n\nvar _closeBraces2 = _interopRequireDefault(_closeBraces);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=template formatter.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = format;\n\nvar _templateFormatter = require('./template formatter');\n\nvar _templateFormatter2 = _interopRequireDefault(_templateFormatter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\nfunction format(value, caret, formatter) {\n\tif (typeof formatter === 'string') {\n\t\tformatter = (0, _templateFormatter2.default)(formatter);\n\t}\n\n\tvar _ref = formatter(value) || {},\n\t    text = _ref.text,\n\t    template = _ref.template;\n\n\tif (text === undefined) {\n\t\ttext = value;\n\t}\n\n\tif (template) {\n\t\tif (caret === undefined) {\n\t\t\tcaret = text.length;\n\t\t} else {\n\t\t\tvar index = 0;\n\t\t\tvar found = false;\n\n\t\t\tvar possibly_last_input_character_index = -1;\n\n\t\t\twhile (index < text.length && index < template.length) {\n\t\t\t\t// Character placeholder found\n\t\t\t\tif (text[index] !== template[index]) {\n\t\t\t\t\tif (caret === 0) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tcaret = index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tpossibly_last_input_character_index = index;\n\n\t\t\t\t\tcaret--;\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\t// If the caret was positioned after last input character,\n\t\t\t// then the text caret index is just after the last input character.\n\t\t\tif (!found) {\n\t\t\t\tcaret = possibly_last_input_character_index + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { text: text, caret: caret };\n}\n//# sourceMappingURL=format.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getSelection = getSelection;\nexports.getOperation = getOperation;\nexports.getCaretPosition = getCaretPosition;\nexports.setCaretPosition = setCaretPosition;\n// Gets <input/> selection bounds\nfunction getSelection(element) {\n\t// If no selection, return nothing\n\tif (element.selectionStart === element.selectionEnd) {\n\t\treturn;\n\t}\n\n\treturn { start: element.selectionStart, end: element.selectionEnd };\n}\n\n// Key codes\nvar Keys = exports.Keys = {\n\tBackspace: 8,\n\tDelete: 46\n\n\t// Finds out the operation to be intercepted and performed\n\t// based on the key down event `keyCode`.\n};function getOperation(event) {\n\tswitch (event.keyCode) {\n\t\tcase Keys.Backspace:\n\t\t\treturn 'Backspace';\n\n\t\tcase Keys.Delete:\n\t\t\treturn 'Delete';\n\t}\n}\n\n// Gets <input/> caret position\nfunction getCaretPosition(element) {\n\treturn element.selectionStart;\n}\n\n// Sets <input/> caret position\nfunction setCaretPosition(element, caret_position) {\n\t// Sanity check\n\tif (caret_position === undefined) {\n\t\treturn;\n\t}\n\n\t// Set caret position.\n\t// There has been an issue with caret positioning on Android devices.\n\t// https://github.com/catamphetamine/input-format/issues/2\n\t// I was revisiting this issue and looked for similar issues in other libraries.\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n\t// https://github.com/text-mask/text-mask/issues/300\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n\t// https://github.com/text-mask/text-mask/pull/400/files\n\t// I've implemented the same workaround here.\n\tif (isAndroid()) {\n\t\tsetTimeout(function () {\n\t\t\treturn element.setSelectionRange(caret_position, caret_position);\n\t\t}, 0);\n\t} else {\n\t\telement.setSelectionRange(caret_position, caret_position);\n\t}\n}\n\nfunction isAndroid() {\n\t// `navigator` is not defined when running mocha tests.\n\tif (typeof navigator !== 'undefined') {\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n\t}\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.onCut = onCut;\nexports.onPaste = onPaste;\nexports.onChange = onChange;\nexports.onKeyDown = onKeyDown;\n\nvar _edit = require('./edit');\n\nvar _edit2 = _interopRequireDefault(_edit);\n\nvar _parse3 = require('./parse');\n\nvar _parse4 = _interopRequireDefault(_parse3);\n\nvar _format2 = require('./format');\n\nvar _format3 = _interopRequireDefault(_format2);\n\nvar _dom = require('./dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction onCut(event, input, _parse, _format, on_change) {\n\t// The actual cut hasn't happened just yet hence the timeout.\n\tsetTimeout(function () {\n\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t}, 0);\n}\n\nfunction onPaste(event, input, _parse, _format, on_change) {\n\tvar selection = (0, _dom.getSelection)(input);\n\n\t// If selection is made,\n\t// just erase the selected text\n\t// prior to pasting\n\tif (selection) {\n\t\terase_selection(input, selection);\n\t}\n\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\nfunction onChange(event, input, _parse, _format, on_change) {\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\n// Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\nfunction onKeyDown(event, input, _parse, _format, on_change) {\n\tvar operation = (0, _dom.getOperation)(event);\n\n\tswitch (operation) {\n\t\tcase 'Delete':\n\t\tcase 'Backspace':\n\t\t\t// Intercept this operation and perform it manually.\n\t\t\tevent.preventDefault();\n\n\t\t\tvar selection = (0, _dom.getSelection)(input);\n\n\t\t\t// If selection is made,\n\t\t\t// just erase the selected text,\n\t\t\t// and don't apply any more operations to it.\n\t\t\tif (selection) {\n\t\t\t\terase_selection(input, selection);\n\t\t\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t\t\t}\n\n\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\treturn format_input_text(input, _parse, _format, operation, on_change);\n\n\t\tdefault:\n\t\t// Will be handled when `onChange` fires.\n\t}\n}\n\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\nfunction erase_selection(input, selection) {\n\tvar text = input.value;\n\ttext = text.slice(0, selection.start) + text.slice(selection.end);\n\n\tinput.value = text;\n\t(0, _dom.setCaretPosition)(input, selection.start);\n}\n\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n\t// Parse `<input/>` textual value.\n\t// Get `value` and `caret` position.\n\tvar _parse2 = (0, _parse4.default)(input.value, (0, _dom.getCaretPosition)(input), _parse),\n\t    value = _parse2.value,\n\t    caret = _parse2.caret;\n\n\t// If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n\t// then apply that operation and get new `value` and `caret` position.\n\n\n\tif (operation) {\n\t\tvar operation_applied = (0, _edit2.default)(value, caret, operation);\n\n\t\tvalue = operation_applied.value;\n\t\tcaret = operation_applied.caret;\n\t}\n\n\t// Format the `value`.\n\t// (and reposition the caret accordingly)\n\tvar formatted = (0, _format3.default)(value, caret, _format);\n\n\tvar text = formatted.text;\n\tcaret = formatted.caret;\n\n\t// Set `<input/>` textual value manually\n\t// to prevent React from resetting the caret position\n\t// later inside subsequent `render()`.\n\t// Doesn't work for custom `inputComponent`s for some reason.\n\tinput.value = text;\n\t// Position the caret properly.\n\t(0, _dom.setCaretPosition)(input, caret);\n\n\t// `<input/>` textual value may have changed,\n\t// so the parsed `value` may have changed too.\n\t// The `value` didn't neccessarily change\n\t// but it might have.\n\ton_change(value);\n}\n//# sourceMappingURL=input control.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('../parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('../input control');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // This is just `./ReactInput.js` rewritten in Hooks.\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\nfunction Input(_ref, ref) {\n\tvar value = _ref.value,\n\t    parse = _ref.parse,\n\t    format = _ref.format,\n\t    InputComponent = _ref.inputComponent,\n\t    onChange = _ref.onChange,\n\t    onCut = _ref.onCut,\n\t    onPaste = _ref.onPaste,\n\t    onKeyDown = _ref.onKeyDown,\n\t    rest = _objectWithoutProperties(_ref, ['value', 'parse', 'format', 'inputComponent', 'onChange', 'onCut', 'onPaste', 'onKeyDown']);\n\n\tvar ownRef = (0, _react.useRef)();\n\tref = ref || ownRef;\n\tvar _onChange = (0, _react.useCallback)(function (event) {\n\t\treturn (0, _inputControl.onChange)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange]);\n\n\tvar _onPaste = (0, _react.useCallback)(function (event) {\n\t\tif (onPaste) {\n\t\t\tonPaste(event);\n\t\t}\n\t\treturn (0, _inputControl.onPaste)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onPaste]);\n\n\tvar _onCut = (0, _react.useCallback)(function (event) {\n\t\tif (onCut) {\n\t\t\tonCut(event);\n\t\t}\n\t\treturn (0, _inputControl.onCut)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onCut]);\n\n\tvar _onKeyDown = (0, _react.useCallback)(function (event) {\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event);\n\t\t}\n\t\treturn (0, _inputControl.onKeyDown)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onKeyDown]);\n\n\treturn _react2.default.createElement(InputComponent, _extends({}, rest, {\n\t\tref: ref,\n\t\tvalue: format(isEmptyValue(value) ? '' : value).text,\n\t\tonKeyDown: _onKeyDown,\n\t\tonChange: _onChange,\n\t\tonPaste: _onPaste,\n\t\tonCut: _onCut }));\n}\n\nInput = _react2.default.forwardRef(Input);\n\nInput.propTypes = {\n\t// Parses a single characher of `<input/>` text.\n\tparse: _propTypes2.default.func.isRequired,\n\n\t// Formats `value` into `<input/>` text.\n\tformat: _propTypes2.default.func.isRequired,\n\n\t// Renders `<input/>` by default.\n\tinputComponent: _propTypes2.default.elementType.isRequired,\n\n\t// `<input/>` `type` attribute.\n\ttype: _propTypes2.default.string.isRequired,\n\n\t// Is parsed from <input/> text.\n\tvalue: _propTypes2.default.string,\n\n\t// This handler is called each time `<input/>` text is changed.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// Passthrough\n\tonKeyDown: _propTypes2.default.func,\n\tonCut: _propTypes2.default.func,\n\tonPaste: _propTypes2.default.func\n};\n\nInput.defaultProps = {\n\t// Renders `<input/>` by default.\n\tinputComponent: 'input',\n\n\t// `<input/>` `type` attribute.\n\ttype: 'text'\n};\n\nexports.default = Input;\n\n\nfunction isEmptyValue(value) {\n\treturn value === undefined || value === null;\n}\n//# sourceMappingURL=Input.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nexport var WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nexport var PLUS_CHARS = '+\\uFF0B';\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport function mergeArrays(a, b) {\n\tvar merged = a.slice();\n\n\tfor (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar element = _ref;\n\n\t\tif (a.indexOf(element) < 0) {\n\t\t\tmerged.push(element);\n\t\t}\n\t}\n\n\treturn merged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\t// ES6 version, requires Set polyfill.\n\t// let merged = new Set(a)\n\t// for (const element of b)\n\t// {\n\t// \tmerged.add(i)\n\t// }\n\t// return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport compare from './tools/semver-compare';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\n/**\r\n * See: https://github.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\tvalidateMetadata(metadata);\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n\t\tthis.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'getCountries',\n\t\tvalue: function getCountries() {\n\t\t\treturn Object.keys(this.metadata.countries).filter(function (_) {\n\t\t\t\treturn _ !== '001';\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'getDefaultCountryMetadataForRegion',\n\t\tvalue: function getDefaultCountryMetadataForRegion() {\n\t\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'IDDPrefix',\n\t\tvalue: function IDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'defaultIDDPrefix',\n\t\tvalue: function defaultIDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[12];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\tif (this.v1 || this.v2) return this.country_metadata[1];\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[this.v2 ? 2 : 3];\n\t\t}\n\t}, {\n\t\tkey: '_getFormats',\n\t\tvalue: function _getFormats(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// formats are all stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixFormattingRule',\n\t\tvalue: function _getNationalPrefixFormattingRule(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// national prefix formatting rule is stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: '_nationalPrefixForParsing',\n\t\tvalue: function _nationalPrefixForParsing() {\n\t\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function _getNationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// \"national prefix is optional when formatting\" flag is\n\t\t// stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormattingInNationalFormat',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n\t\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this.types() && this.types().length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Versions <= 1.2.4: can be `undefined`.\n\t\t\t// Version >= 1.2.5: can be `0`.\n\t\t\treturn !!this.types();\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'ext',\n\t\tvalue: function ext() {\n\t\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n\t\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormattingInNationalFormat',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n\t\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormattingInNationalFormat',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix.\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule());\n\t\t\t// Previously, `FIRST_GROUP_ONLY_PREFIX_PATTERN` check was instead done via:\n\t\t\t// // Check that national prefix formatting rule is not a \"dummy\" one.\n\t\t\t// this.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// // Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\t// // Filters out cases like \"($1)\".\n\t\t\t// // Is used in place of `libphonenumber`'s `FIRST_GROUP_ONLY_PREFIX_PATTERN_` regexp.\n\t\t\t// /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n\nexport function validateMetadata(metadata) {\n\tif (!metadata) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n\t}\n\n\t// `country_phone_code_to_countries` was renamed to\n\t// `country_calling_codes` in `1.0.18`.\n\tif (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar type_of = function type_of(_) {\n\treturn typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\nexport function getExtPrefix(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).ext();\n\t}\n\treturn DEFAULT_EXT_PREFIX;\n}\n\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\nexport function getCountryCallingCode(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).countryCallingCode();\n\t}\n\tthrow new Error('Unknown country: ' + country);\n}\n\nexport function isSupportedCountry(country, metadata) {\n\t// metadata = new Metadata(metadata)\n\t// return metadata.hasCountry(country)\n\treturn metadata.countries[country] !== undefined;\n}\n//# sourceMappingURL=metadata.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\nexport default function cmp(a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n//# sourceMappingURL=semver-compare.js.map","import { VALID_DIGITS } from './constants';\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nfunction create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\n\t// \"доб.\"\n\t'\\u0434\\u043E\\u0431|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nexport function extractExtension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n//# sourceMappingURL=extension.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension';\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport default function isViablePhoneNumber(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport function parseDigit(character) {\n\treturn DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nexport default function parseDigits(string) {\n\tvar result = '';\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tvar digit = parseDigit(character);\n\t\tif (digit) {\n\t\t\tresult += digit;\n\t\t}\n\t}\n\treturn result;\n}\n//# sourceMappingURL=parseDigits.js.map","import { parseDigit } from './parseDigits';\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\nexport default function parseIncompletePhoneNumber(string) {\n\tvar result = '';\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tresult += parsePhoneNumberCharacter(character, result) || '';\n\t}\n\treturn result;\n}\n\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\nexport function parsePhoneNumberCharacter(character, value) {\n\t// Only allow a leading `+`.\n\tif (character === '+') {\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn;\n\t\t}\n\t\treturn '+';\n\t}\n\t// Allow digits.\n\treturn parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType(input) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tfor (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar _type = _ref;\n\n\t\tif (is_of_type(nationalNumber, _type, metadata)) {\n\t\t\treturn _type;\n\t\t}\n\t}\n}\n\nexport function is_of_type(nationalNumber, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn matchesEntirely(nationalNumber, type.pattern());\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = nationalNumber.length;\n\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\n\nexport default function isPossibleNumber(input, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (options.v2) {\n\t\tif (!input.countryCallingCode) {\n\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t}\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else {\n\t\tif (!input.phone) {\n\t\t\treturn false;\n\t\t}\n\t\tif (input.country) {\n\t\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t\t}\n\t\t\tmetadata.country(input.country);\n\t\t} else {\n\t\t\tif (!input.countryCallingCode) {\n\t\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t\t}\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t\t}\n\t}\n\n\tif (!metadata.possibleLengths()) {\n\t\tthrow new Error('Metadata too old');\n\t}\n\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\n\nexport function is_possible_number(national_number, is_international, metadata) {\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport function getIDDPrefix(country, metadata) {\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n\t\treturn countryMetadata.IDDPrefix();\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix();\n}\n\nexport function stripIDDPrefix(number, country, metadata) {\n\tif (!country) {\n\t\treturn;\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tvar IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn;\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length);\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tvar matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n\t\tif (matchedGroups[1] === '0') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn number;\n}\n//# sourceMappingURL=IDD.js.map","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport isViablePhoneNumber from './isViablePhoneNumber';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\n\ttext = text.replace(/^tel:/, 'tel=');\n\n\tfor (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar part = _ref;\n\n\t\tvar _part$split = part.split('='),\n\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t    name = _part$split2[0],\n\t\t    value = _part$split2[1];\n\n\t\tswitch (name) {\n\t\t\tcase 'tel':\n\t\t\t\tnumber = value;\n\t\t\t\tbreak;\n\t\t\tcase 'ext':\n\t\t\t\text = value;\n\t\t\t\tbreak;\n\t\t\tcase 'phone-context':\n\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\tnumber = value + number;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If the phone number is not viable, then abort.\n\tif (!isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\tvar result = { number: number };\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref2) {\n\tvar number = _ref2.number,\n\t    ext = _ref2.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\n\nvar DEFAULT_OPTIONS = {\n\tformatExtension: function formatExtension(formattedNumber, extension, metadata) {\n\t\treturn '' + formattedNumber + metadata.ext() + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n\t// formatNumber('+78005553535', 'NATIONAL')\n\t// formatNumber('+78005553535', 'NATIONAL', metadata)\n\t// ```\n\t//\n};export default function formatNumber(input, format, options, metadata) {\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, DEFAULT_OPTIONS, options);\n\t} else {\n\t\toptions = DEFAULT_OPTIONS;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (input.country) {\n\t\t// Validate `input.country`.\n\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t}\n\t\tmetadata.country(input.country);\n\t} else if (input.countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else return input.phone || '';\n\n\tvar countryCallingCode = metadata.countryCallingCode();\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n\t// This variable should have been declared inside `case`s\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\n\tvar number = void 0;\n\n\tswitch (format) {\n\t\tcase 'NATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options);\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'INTERNATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '+' + countryCallingCode;\n\t\t\t}\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n\t\t\tnumber = '+' + countryCallingCode + ' ' + number;\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + countryCallingCode + nationalNumber;\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966({\n\t\t\t\tnumber: '+' + countryCallingCode + nationalNumber,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'IDD':\n\t\t\tif (!options.fromCountry) {\n\t\t\t\treturn;\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n\t\t\t}\n\t\t\tvar IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\t\t\tif (!IDDPrefix) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.humanReadable) {\n\t\t\t\tvar formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata, options);\n\t\t\t\tif (formattedForSameCountryCallingCode) {\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode;\n\t\t\t\t} else {\n\t\t\t\t\tnumber = IDDPrefix + ' ' + countryCallingCode + ' ' + formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n\t\t\t\t}\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\t\t\t}\n\t\t\treturn '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function formatNationalNumberUsingFormat(number, format, useInternationalSeparator, useNationalPrefixFormattingRule, metadata) {\n\tvar formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalSeparator ? format.internationalFormat() : useNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\tif (useInternationalSeparator) {\n\t\treturn applyInternationalSeparatorStyle(formattedNumber);\n\t}\n\treturn formattedNumber;\n}\n\nfunction formatNationalNumber(number, formatAs, metadata, options) {\n\tvar format = chooseFormatForNumber(metadata.formats(), number);\n\tif (!format) {\n\t\treturn number;\n\t}\n\treturn formatNationalNumberUsingFormat(number, format, formatAs === 'INTERNATIONAL', format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true, metadata);\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n\tfor (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar format = _ref;\n\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0) {\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tvar lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\n\t\t\treturn format;\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nexport function applyInternationalSeparatorStyle(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata, options) {\n\tvar fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n\tfromCountryMetadata.country(fromCountry);\n\t// If calling within the same country calling code.\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n\t\t// For NANPA regions, return the national format for these regions\n\t\t// but prefix it with the country calling code.\n\t\tif (toCountryCallingCode === '1') {\n\t\t\treturn toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n\t\t}\n\t\t// If regions share a country calling code, the country calling code need\n\t\t// not be dialled. This also applies when dialling within a region, so this\n\t\t// if clause covers both these cases. Technically this is the case for\n\t\t// dialling from La Reunion to other overseas departments of France (French\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n\t\t// this edge case for now and for those cases return the version including\n\t\t// country calling code. Details here:\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\n\t\t//\n\t\treturn formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n\t}\n}\n//# sourceMappingURL=format_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n\tfunction PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n\t\t_classCallCheck(this, PhoneNumber);\n\n\t\tif (!countryCallingCode) {\n\t\t\tthrow new TypeError('`countryCallingCode` not passed');\n\t\t}\n\t\tif (!nationalNumber) {\n\t\t\tthrow new TypeError('`nationalNumber` not passed');\n\t\t}\n\t\t// If country code is passed then derive `countryCallingCode` from it.\n\t\t// Also store the country code as `.country`.\n\t\tif (isCountryCode(countryCallingCode)) {\n\t\t\tthis.country = countryCallingCode;\n\t\t\tvar _metadata = new Metadata(metadata);\n\t\t\t_metadata.country(countryCallingCode);\n\t\t\tcountryCallingCode = _metadata.countryCallingCode();\n\t\t}\n\t\tthis.countryCallingCode = countryCallingCode;\n\t\tthis.nationalNumber = nationalNumber;\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(PhoneNumber, [{\n\t\tkey: 'isPossible',\n\t\tvalue: function isPossible() {\n\t\t\treturn isPossibleNumber(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'isValid',\n\t\tvalue: function isValid() {\n\t\t\treturn isValidNumber(this, { v2: true }, this.metadata);\n\t\t}\n\n\t\t// // Is just an alias for `this.isValid() && this.country === country`.\n\t\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n\t\t// isValidForRegion(country) {\n\t\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n\t\t// }\n\n\t}, {\n\t\tkey: 'getType',\n\t\tvalue: function getType() {\n\t\t\treturn getNumberType(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format(_format, options) {\n\t\t\treturn formatNumber(this, _format, options ? _extends({}, options, { v2: true }) : { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'formatNational',\n\t\tvalue: function formatNational(options) {\n\t\t\treturn this.format('NATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'formatInternational',\n\t\tvalue: function formatInternational(options) {\n\t\t\treturn this.format('INTERNATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'getURI',\n\t\tvalue: function getURI(options) {\n\t\t\treturn this.format('RFC3966', options);\n\t\t}\n\t}]);\n\n\treturn PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\n\nvar isCountryCode = function isCountryCode(value) {\n\treturn (/^[A-Z]{2}$/.test(value)\n\t);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n\n  metadata = new Metadata(metadata);\n\n  // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\n\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber';\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nexport default function parse(text) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\tmetadata = new Metadata(metadata);\n\n\t// Validate `defaultCountry`.\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parseInput = parseInput(text, options.v2),\n\t    formattedPhoneNumber = _parseInput.number,\n\t    ext = _parseInput.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formattedPhoneNumber) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('NOT_A_NUMBER');\n\t\t}\n\t\treturn {};\n\t}\n\n\tvar _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, metadata),\n\t    country = _parsePhoneNumber.country,\n\t    nationalNumber = _parsePhoneNumber.nationalNumber,\n\t    countryCallingCode = _parsePhoneNumber.countryCallingCode,\n\t    carrierCode = _parsePhoneNumber.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n\t\t// Won't throw here because the regexp already demands length > 1.\n\t\t/* istanbul ignore if */\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_SHORT');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\tif (options.v2) {\n\t\tvar phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\t\tif (country) {\n\t\t\tphoneNumber.country = country;\n\t\t}\n\t\tif (carrierCode) {\n\t\t\tphoneNumber.carrierCode = carrierCode;\n\t\t}\n\t\tif (ext) {\n\t\t\tphoneNumber.ext = ext;\n\t\t}\n\t\treturn phoneNumber;\n\t}\n\n\t// Check if national phone number pattern matches the number.\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, nationalNumber, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n\t\tphone: nationalNumber,\n\t\text: ext\n\t};\n}\n\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\nexport function extractFormattedPhoneNumber(text, v2) {\n\tif (!text) {\n\t\treturn;\n\t}\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\n\t\tif (v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\treturn;\n\t}\n\t// Attempt to extract a possible number from the string passed in\n\tvar startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\tif (startsAt < 0) {\n\t\treturn;\n\t}\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(startsAt)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n/**\r\n * Strips any national prefix (such as 0, 1) present in the number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ number, carrierCode }`.\r\n */\nexport function stripNationalPrefixAndCarrierCode(number, metadata) {\n\tif (!number) {\n\t\treturn { number: number };\n\t}\n\n\tif (!metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// See METADATA.md for the description of\n\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n\n\t// Attempt to parse the first digits as a national prefix.\n\tvar prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar prefixMatch = prefixPattern.exec(number);\n\n\tif (!prefixMatch) {\n\t\treturn { number: number };\n\t}\n\n\tvar nationalSignificantNumber = void 0;\n\tvar carrierCode = void 0;\n\n\t// If a \"capturing group\" didn't match\n\t// then its element in `prefixMatch[]` array will be `undefined`.\n\n\tvar capturedGroupsCount = prefixMatch.length - 1;\n\tif (metadata.nationalPrefixTransformRule() && capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {\n\t\tnationalSignificantNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule());\n\t\t// Carrier code is the last captured group,\n\t\t// but only when there's more than one captured group.\n\t\tif (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {\n\t\t\tcarrierCode = prefixMatch[1];\n\t\t}\n\t}\n\t// If it's a simple-enough case then just\n\t// strip the national prefix from the number.\n\telse {\n\t\t\t// National prefix is the whole substring matched by\n\t\t\t// the `national_prefix_for_parsing` regexp.\n\t\t\tvar nationalPrefix = prefixMatch[0];\n\t\t\tnationalSignificantNumber = number.slice(nationalPrefix.length);\n\t\t\t// Carrier code is the last captured group.\n\t\t\tif (capturedGroupsCount > 0) {\n\t\t\t\tcarrierCode = prefixMatch[1];\n\t\t\t}\n\t\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matchesEntirely(number, national_number_rule) &&\n\t// \t!matchesEntirely(nationalSignificantNumber, national_number_rule)) {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: nationalSignificantNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nexport function findCountryCode(countryCallingCode, nationalPhoneNumber, metadata) {\n\t// Is always non-empty, because `countryCallingCode` is always valid\n\tvar possibleCountries = metadata.countryCallingCodes()[countryCallingCode];\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possibleCountries.length === 1) {\n\t\treturn possibleCountries[0];\n\t}\n\treturn _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\n// Changes `metadata` `country`.\nfunction _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {\n\tmetadata = new Metadata(metadata);\n\tfor (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country = _ref;\n\n\t\tmetadata.country(country);\n\t\t// Leading digits check would be the simplest one\n\t\tif (metadata.leadingDigits()) {\n\t\t\tif (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n\t\t\t\treturn country;\n\t\t\t}\n\t\t}\n\t\t// Else perform full validation with all of those\n\t\t// fixed-line/mobile/etc regular expressions.\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country: country }, undefined, metadata.metadata)) {\n\t\t\t\treturn country;\n\t\t\t}\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parseInput(text, v2) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn parseRFC3966(text);\n\t}\n\tvar number = extractFormattedPhoneNumber(text, v2);\n\t// If the phone number is not viable, then abort.\n\tif (!number || !isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = extractExtension(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber\r\n * @param {string} [defaultCountry]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, metadata) {\n\tvar _extractCountryCallin = extractCountryCallingCode(formattedPhoneNumber, defaultCountry, metadata.metadata),\n\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t    number = _extractCountryCallin.number;\n\n\tvar country = void 0;\n\n\tif (countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t}\n\t// If `formattedPhoneNumber` is in \"national\" format\n\t// then `number` is defined and `countryCallingCode` isn't.\n\telse if (number && defaultCountry) {\n\t\t\tmetadata.country(defaultCountry);\n\t\t\tcountry = defaultCountry;\n\t\t\tcountryCallingCode = getCountryCallingCode(defaultCountry, metadata.metadata);\n\t\t} else return {};\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar _parseNationalNumber = parseNationalNumber(number, metadata),\n\t    nationalNumber = _parseNationalNumber.nationalNumber,\n\t    carrierCode = _parseNationalNumber.carrierCode;\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t// get their countries populated with the full set of\n\t// \"phone number type\" regular expressions.\n\t//\n\n\n\tvar exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata);\n\tif (exactCountry) {\n\t\tcountry = exactCountry;\n\t\tmetadata.country(country);\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nfunction parseNationalNumber(number, metadata) {\n\tvar nationalNumber = parseIncompletePhoneNumber(number);\n\tvar carrierCode = void 0;\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(nationalNumber, metadata),\n\t    potentialNationalNumber = _stripNationalPrefixA.number,\n\t    potentialCarrierCode = _stripNationalPrefixA.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch (checkNumberLengthForType(potentialNationalNumber, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif (matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && !matchesEntirely(potentialNationalNumber, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\nexport function extractCountryCallingCode(number, country, metadata) {\n\tnumber = parseIncompletePhoneNumber(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\t// Convert an \"out-of-country\" dialing phone number\n\t\t// to a proper international phone number.\n\t\tvar numberWithoutIDD = stripIDDPrefix(number, country, metadata);\n\n\t\t// If an IDD prefix was stripped then\n\t\t// convert the number to international one\n\t\t// for subsequent parsing.\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\n\t\t\tnumber = '+' + numberWithoutIDD;\n\t\t} else {\n\t\t\treturn { number: number };\n\t\t}\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n\n\treturn {};\n}\n//# sourceMappingURL=parse_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parseNumber from './parse_';\n\nexport default function parsePhoneNumber(text, options, metadata) {\n\treturn parseNumber(text, _extends({}, options, { v2: true }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\n\nexport default function parsePhoneNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumber_(text, options, metadata);\n}\n\nexport function normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parsePhoneNumber('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed then move it to `options`.\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\tif (!arg_2 || typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = arg_3;\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = undefined;\n\t\t\tmetadata = arg_3;\n\t\t}\n\n\t\tif (arg_2) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, options);\n\t\t}\n\t}\n\t// `defaultCountry` is not passed.\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n\telse if (isObject(arg_2)) {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new Error('Invalid second argument: ' + arg_2);\n\n\treturn {\n\t\ttext: text,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Otherwise istanbul would show this as \"branch not covered\".\n/* istanbul ignore next */\nvar isObject = function isObject(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\n\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n\t// Validate `defaultCountry`.\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n\t\toptions = _extends({}, options, {\n\t\t\tdefaultCountry: undefined\n\t\t});\n\t}\n\t// Parse phone number.\n\ttry {\n\t\treturn parsePhoneNumber(text, options, metadata);\n\t} catch (error) {\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ParseError) {\n\t\t\t//\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\n\nexport default function parsePhoneNumberFromString() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nimport Metadata from './metadata';\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { matchesEntirely } from './util';\n\nimport { extractCountryCallingCode as _extractCountryCallingCode, extractFormattedPhoneNumber, findCountryCode, stripNationalPrefixAndCarrierCode } from './parse_';\n\nimport { FIRST_GROUP_PATTERN, formatNationalNumberUsingFormat, applyInternationalSeparatorStyle } from './format_';\n\nimport { checkNumberLengthForType } from './getNumberType_';\n\nimport parseDigits from './parseDigits';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\n\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/;\n\n// Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true;\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\[([^\\[\\]])*\\]/g\n\t);\n};\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\d(?=[^,}][^,}])/g\n\t);\n};\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_PART + '$', 'i');\n\nvar AsYouType = function () {\n\n\t/**\r\n  * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(defaultCountry, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.options = {};\n\n\t\tthis.metadata = new Metadata(metadata);\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n\t\t\tthis.defaultCountry = defaultCountry;\n\t\t}\n\t\tthis.reset();\n\t}\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\tthis.formattedOutput = '';\n\t\t\tthis.international = undefined;\n\t\t\tthis.countryCallingCode = undefined;\n\t\t\tthis.digits = '';\n\t\t\tthis.nationalNumberDigits = '';\n\t\t\tthis.nationalPrefix = '';\n\t\t\tthis.carrierCode = '';\n\t\t\tthis.setCountry(this.defaultCountry);\n\t\t\tthis.resetFormat();\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'setCountry',\n\t\tvalue: function setCountry(country) {\n\t\t\tthis.country = country;\n\t\t\tthis.metadata.country(country);\n\t\t\tif (country) {\n\t\t\t\tthis.initializePhoneNumberFormatsForCountry();\n\t\t\t} else {\n\t\t\t\tthis.matchingFormats = [];\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetFormat',\n\t\tvalue: function resetFormat() {\n\t\t\tthis.chosenFormat = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.populatedNationalNumberTemplate = undefined;\n\t\t\tthis.populatedNationalNumberTemplatePosition = -1;\n\t\t}\n\n\t\t/**\r\n   * Inputs \"next\" phone number characters.\r\n   * @param  {string} text\r\n   * @return {string} Formatted phone number characters that have been input so far.\r\n   */\n\n\t}, {\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\tvar formattedDigits = this.extractFormattedDigits(text);\n\t\t\t// If the extracted phone number part\n\t\t\t// can possibly be a part of some valid phone number\n\t\t\t// then parse phone number characters from a formatted phone number.\n\t\t\tif (VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN.test(formattedDigits)) {\n\t\t\t\tthis.formattedOutput = this.getFullNumber(this.inputDigits(parseDigits(formattedDigits)) || this.getNonFormattedNationalNumber());\n\t\t\t}\n\t\t\treturn this.formattedOutput;\n\t\t}\n\n\t\t/**\r\n   * Extracts formatted phone number digits from text (if there're any).\r\n   * @param  {string} text\r\n   * @return {string}\r\n   */\n\n\t}, {\n\t\tkey: 'extractFormattedDigits',\n\t\tvalue: function extractFormattedDigits(text) {\n\t\t\t// Extract a formatted phone number part from text.\n\t\t\tvar extractedNumber = extractFormattedPhoneNumber(text) || '';\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// because it's not extracted in such cases.\n\t\t\tif (!extractedNumber) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textractedNumber = '+';\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Trim a `+`.\n\t\t\tif (extractedNumber[0] === '+') {\n\t\t\t\t// Trim the `+`.\n\t\t\t\textractedNumber = extractedNumber.slice('+'.length);\n\t\t\t\tif (this.digits) {\n\t\t\t\t\t// If an out of position `+` is detected\n\t\t\t\t\t// (or a second `+`) then just ignore it.\n\t\t\t\t} else {\n\t\t\t\t\tthis.startInternationalNumber();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn extractedNumber;\n\t\t}\n\t}, {\n\t\tkey: 'startInternationalNumber',\n\t\tvalue: function startInternationalNumber() {\n\t\t\t// Prepend the `+` to parsed input.\n\t\t\tthis.international = true;\n\t\t\t// If a default country was set then reset it\n\t\t\t// because an explicitly international phone\n\t\t\t// number is being entered.\n\t\t\tthis.setCountry();\n\t\t}\n\n\t\t/**\r\n   * Inputs \"next\" phone number digits.\r\n   * @param  {string} digits\r\n   * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n   */\n\n\t}, {\n\t\tkey: 'inputDigits',\n\t\tvalue: function inputDigits(nextDigits) {\n\t\t\t// Append phone number digits.\n\t\t\tthis.digits += nextDigits;\n\t\t\t// Try to format the parsed input\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (this.countryCallingCode) {\n\t\t\t\t\tthis.nationalNumberDigits += nextDigits;\n\t\t\t\t\t// `this.country` could be `undefined`, for example, when there is\n\t\t\t\t\t// ambiguity in a form of several different countries,\n\t\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t\t// (e.g. NANPA: USA, Canada, etc), and there's not enough digits\n\t\t\t\t\t// to reliably determine the country the phone number belongs to.\n\t\t\t\t\t// Therefore, in cases of such ambiguity, each time something is input,\n\t\t\t\t\t// try to determine the country (if it hasn't been determined yet).\n\t\t\t\t\tif (!this.country || this.isCountryCallingCodeAmbiguous()) {\n\t\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Extract country calling code from the digits entered so far.\n\t\t\t\t\t// There must be some digits in order to extract anything from them.\n\t\t\t\t\tif (!this.digits) {\n\t\t\t\t\t\t// Don't format the phone number.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then they can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\t\t\t\t\t//\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then don't format the phone number.\n\t\t\t\t\t//\n\t\t\t\t\tif (!this.extractCountryCallingCode()) {\n\t\t\t\t\t\t// Don't format the phone number.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Possibly extract a national prefix.\n\t\t\t\t\t// Some people incorrectly input national prefix\n\t\t\t\t\t// in an international phone number.\n\t\t\t\t\t// For example, some people write British phone numbers as `+44(0)...`.\n\t\t\t\t\t// Also, mobile phone numbers in Mexico are supposed to be dialled\n\t\t\t\t\t// internationally using a `15` national prefix.\n\t\t\t\t\t//\n\t\t\t\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\n\t\t\t\t\t//\n\t\t\t\t\t// \"Dialing a Mexican cell phone from abroad\n\t\t\t\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\n\t\t\t\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\n\t\t\t\t\t// (which is “52”) and before the area code.\n\t\t\t\t\t// You also ignore the 045, and simply dial the area code and the\n\t\t\t\t\t// cell phone’s number.\n\t\t\t\t\t//\n\t\t\t\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\n\t\t\t\t\t// asking you to redial using it.\n\t\t\t\t\t//\n\t\t\t\t\t// For example, if you are calling from the USA to a cell phone\n\t\t\t\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n\t\t\t\t\t// (Note that this is different to calling a land line in Mexico City\n\t\t\t\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n\t\t\t\t\t//\n\t\t\t\t\tthis.nationalNumberDigits = this.digits.slice(this.countryCallingCode.length);\n\t\t\t\t\t// this.extractNationalPrefix()\n\t\t\t\t\t//\n\t\t\t\t\t// Determine the country from country calling code and national number.\n\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.nationalNumberDigits += nextDigits;\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\t\t\t\tvar previousNationalPrefix = this.nationalPrefix;\n\t\t\t\tthis.nationalNumberDigits = this.nationalPrefix + this.nationalNumberDigits;\n\t\t\t\t// Re-extract national prefix.\n\t\t\t\tthis.extractNationalPrefix();\n\t\t\t\t// If another national prefix has been extracted.\n\t\t\t\tif (this.nationalPrefix !== previousNationalPrefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.initializePhoneNumberFormatsForCountry();\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.nationalNumberDigits) {\n\t\t\t\t// Match the available formats by the currently available leading digits.\n\t\t\t\tthis.matchFormats(this.nationalNumberDigits);\n\t\t\t}\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\treturn this.formatNationalNumberWithNextDigits(nextDigits);\n\t\t}\n\t}, {\n\t\tkey: 'formatNationalNumberWithNextDigits',\n\t\tvalue: function formatNationalNumberWithNextDigits(nextDigits) {\n\t\t\t// See if the phone number digits can be formatted as a complete phone number.\n\t\t\t// If not, use the results from `formatNextNationalNumberDigits()`,\n\t\t\t// which formats based on the chosen formatting pattern.\n\t\t\t// Attempting to format complete phone number first is how it's done\n\t\t\t// in Google's `libphonenumber`.\n\t\t\tvar formattedNumber = this.attemptToFormatCompletePhoneNumber();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone number is invalid,\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formattedNumber) {\n\t\t\t\treturn formattedNumber;\n\t\t\t}\n\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attemptToFormatCompletePhoneNumber`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar previouslyChosenFormat = this.chosenFormat;\n\t\t\t// Choose a format from the list of matching ones.\n\t\t\tvar newlyChosenFormat = this.chooseFormat();\n\t\t\tif (newlyChosenFormat) {\n\t\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\n\t\t\t\t\t// If could format the next (current) digit\n\t\t\t\t\t// using the previously chosen phone number format\n\t\t\t\t\t// then return the formatted number so far.\n\t\t\t\t\t//\n\t\t\t\t\t// If no new phone number format could be chosen,\n\t\t\t\t\t// and couldn't format the supplied national number\n\t\t\t\t\t// using the previously chosen phone number pattern,\n\t\t\t\t\t// then return `undefined`.\n\t\t\t\t\t//\n\t\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits);\n\t\t\t\t} else {\n\t\t\t\t\t// If a more appropriate phone number format\n\t\t\t\t\t// has been chosen for these \"leading digits\",\n\t\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t\t// using the newly selected format.\n\t\t\t\t\t//\n\t\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t\t// the supplied national number\n\t\t\t\t\t// using the selected phone number pattern.\n\t\t\t\t\t//\n\t\t\t\t\treturn this.reformatNationalNumber();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'chooseFormat',\n\t\tvalue: function chooseFormat() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tfor (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref;\n\n\t\t\t\t// If this format is currently being used\n\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\tif (this.chosenFormat === format) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!this.createFormattingTemplate(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.chosenFormat = format;\n\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t// using the old template needs to be reset.\n\t\t\t\tthis.populatedNationalNumberTemplatePosition = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!this.chosenFormat) {\n\t\t\t\t// No format matches the national phone number entered.\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t\treturn this.chosenFormat;\n\t\t}\n\n\t\t// Formats each digit of the national phone number (so far)\n\t\t// using the selected format.\n\n\t}, {\n\t\tkey: 'reformatNationalNumber',\n\t\tvalue: function reformatNationalNumber() {\n\t\t\treturn this.formatNextNationalNumberDigits(this.nationalPrefix + this.nationalNumberDigits);\n\t\t}\n\t}, {\n\t\tkey: 'initializePhoneNumberFormatsForCountry',\n\t\tvalue: function initializePhoneNumberFormatsForCountry() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.matchingFormats = this.metadata.formats().filter(function (format) {\n\t\t\t\t// Compared to `libphonenumber`'s code, the two \"Discard a few formats\n\t\t\t\t// that we know are not relevant based on the presence of the national prefix\"\n\t\t\t\t// checks have changed: the first one has been moved to `.matchFormats()`,\n\t\t\t\t// and the second one doesn't apply to this library because it doesn't deal with\n\t\t\t\t// \"incomplete\" phone numbers (for example, phone numbers, entered without \"area code\").\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'matchFormats',\n\t\tvalue: function matchFormats(leadingDigits) {\n\t\t\tvar _this = this;\n\n\t\t\t// \"leading digits\" pattern list starts with a\n\t\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t\t// this national (significant) number can already be formatted.\n\t\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t\t// This implementation is different from Google's\n\t\t\t// in that it searches for a fitting format\n\t\t\t// even if the user has entered less than\n\t\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t\t// Because some leading digit patterns already match for a single first digit.\n\t\t\tvar leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\t\t\tif (leadingDigitsPatternIndex < 0) {\n\t\t\t\tleadingDigitsPatternIndex = 0;\n\t\t\t}\n\n\t\t\tthis.matchingFormats = this.matchingFormats.filter(function (format) {\n\t\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t\t// and the user didn't input the national prefix\n\t\t\t\t// then this phone number format isn't suitable.\n\t\t\t\tif (!_this.isInternational() && !_this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tvar leadingDigitsPatternsCount = format.leadingDigitsPatterns().length;\n\t\t\t\t// If this format is not restricted to a certain\n\t\t\t\t// leading digits pattern then it fits.\n\t\t\t\tif (leadingDigitsPatternsCount === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// Start excluding any non-matching formats only when the\n\t\t\t\t// national number entered so far is at least 3 digits long,\n\t\t\t\t// otherwise format matching would give false negatives.\n\t\t\t\t// For example, when the digits entered so far are `2`\n\t\t\t\t// and the leading digits pattern is `21` –\n\t\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t\t\t// then format matching starts narrowing down the list of possible formats\n\t\t\t\t// (only previously matched formats are considered for next digits).\n\t\t\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n\t\t\t\tvar leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex];\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leadingDigitsPattern + ')').test(leadingDigits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'getSeparatorAfterNationalPrefix',\n\t\tvalue: function getSeparatorAfterNationalPrefix(format) {\n\t\t\tif (this.metadata.countryCallingCode() === '1') {\n\t\t\t\treturn ' ';\n\t\t\t}\n\t\t\tif (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n\t\t\t\treturn ' ';\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\n\t\t// This is in accordance to how Google's `libphonenumber` does it.\n\t\t// \"Check to see if there is an exact pattern match for these digits.\n\t\t// If so, we should use this instead of any other formatting template\n\t\t// whose `leadingDigitsPattern` also matches the input.\"\n\n\t}, {\n\t\tkey: 'attemptToFormatCompletePhoneNumber',\n\t\tvalue: function attemptToFormatCompletePhoneNumber() {\n\t\t\tfor (var _iterator2 = this.matchingFormats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i2++];\n\t\t\t\t} else {\n\t\t\t\t\t_i2 = _iterator2.next();\n\t\t\t\t\tif (_i2.done) break;\n\t\t\t\t\t_ref2 = _i2.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref2;\n\n\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\t\t\t\tif (!matcher.test(this.nationalNumberDigits)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Here, national number is formatted without \"national prefix\n\t\t\t\t// formatting rule\", because otherwise there'd be a bug\n\t\t\t\t// when \"area code\" is \"duplicated\" during input:\n\t\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\n\t\t\t\tvar formattedNationalNumber = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), false, // Don't prepend national prefix (it will be prepended manually).\n\t\t\t\tthis.metadata);\n\t\t\t\t// Check if this `format` preserves all digits.\n\t\t\t\t// This is how it's done in Google's `libphonenumber`.\n\t\t\t\t// Also, it fixes the bug when \"area code\" is \"duplicated\" during input:\n\t\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\n\t\t\t\t//\n\t\t\t\t// \"Check that we didn't remove nor add any extra digits when we matched\n\t\t\t\t// this formatting pattern. This usually happens after we entered the last\n\t\t\t\t// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n\t\t\t\t// formatted but AYTF should retain all the number entered and not change\n\t\t\t\t// in order to match a format (of same leading digits and length) display\n\t\t\t\t// in that way.\"\n\t\t\t\t// \"If it's the same (i.e entered number and format is same), then it's\n\t\t\t\t// safe to return this in formatted number as nothing is lost / added.\"\n\t\t\t\t// Otherwise, don't use this format.\n\t\t\t\t// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n\t\t\t\t// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n\t\t\t\t//\n\t\t\t\tif (parseDigits(formattedNationalNumber) !== this.nationalNumberDigits) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Prepend national prefix (if any).\n\t\t\t\tif (this.nationalPrefix) {\n\t\t\t\t\t// Here, national number is formatted with \"national prefix\n\t\t\t\t\t// formatting rule\". The reason is that \"national prefix\n\t\t\t\t\t// formatting rule\" often adds parentheses, and while Google's\n\t\t\t\t\t// `libphonenumber` dismisses those preferring simply prepending\n\t\t\t\t\t// national prefix followed by a \" \" character, this library\n\t\t\t\t\t// looks if the national prefix could be formatted better.\n\t\t\t\t\tvar formattedNationalNumberWithNationalPrefix = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), true, // Prepend national prefix.\n\t\t\t\t\tthis.metadata);\n\t\t\t\t\tif (parseDigits(formattedNationalNumberWithNationalPrefix) === this.nationalPrefix + this.nationalNumberDigits) {\n\t\t\t\t\t\tformattedNationalNumber = formattedNationalNumberWithNationalPrefix;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tformattedNationalNumber = this.nationalPrefix + this.getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// formats national number (probably) without national prefix.\n\t\t\t\t// Formatting a national number with national prefix could result in\n\t\t\t\t// bugs when \"area code\" is \"duplicated\" during input:\n\t\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\n\t\t\t\t// The \"are all digits preserved\" check fixes that type of bug.\n\n\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\tthis.resetFormat();\n\t\t\t\tthis.chosenFormat = format;\n\t\t\t\t// Set `this.template` and `this.populatedNationalNumberTemplate`.\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (this.createFormattingTemplate(format)) {\n\t\t\t\t\t// Populate `this.populatedNationalNumberTemplate` with phone number digits.\n\t\t\t\t\tthis.reformatNationalNumber();\n\t\t\t\t} else {\n\t\t\t\t\t// If the formatting template couldn't be created for a format,\n\t\t\t\t\t// create it manually from the formatted phone number.\n\t\t\t\t\t// This case doesn't ever happen with the current metadata.\n\t\t\t\t\tthis.template = this.getFullNumber(formattedNationalNumber).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\tthis.populatedNationalNumberTemplate = formattedNationalNumber;\n\t\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.length - 1;\n\t\t\t\t}\n\t\t\t\treturn formattedNationalNumber;\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode ` in case of an international phone number\n\n\t}, {\n\t\tkey: 'getFullNumber',\n\t\tvalue: function getFullNumber(formattedNationalNumber) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\treturn '+' + this.digits;\n\t\t\t\t}\n\t\t\t\tif (!formattedNationalNumber) {\n\t\t\t\t\treturn '+' + this.countryCallingCode;\n\t\t\t\t}\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n\t\t\t}\n\t\t\treturn formattedNationalNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getNonFormattedNationalNumber',\n\t\tvalue: function getNonFormattedNationalNumber() {\n\t\t\treturn this.nationalPrefix + (this.nationalPrefix && this.nationalNumberDigits && this.getSeparatorAfterNationalPrefix()) + this.nationalNumberDigits;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extractCountryCallingCode',\n\t\tvalue: function extractCountryCallingCode() {\n\t\t\tvar _extractCountryCallin = _extractCountryCallingCode('+' + this.digits, this.defaultCountry, this.metadata.metadata),\n\t\t\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t\t\t    number = _extractCountryCallin.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.nationalNumberDigits = number;\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\tthis.initializePhoneNumberFormatsForCountry();\n\t\t\tthis.resetFormat();\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extractNationalPrefix',\n\t\tvalue: function extractNationalPrefix() {\n\t\t\tthis.nationalPrefix = '';\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\t\t\tvar _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(this.nationalNumberDigits, this.metadata),\n\t\t\t    potentialNationalNumber = _stripNationalPrefixA.number,\n\t\t\t    carrierCode = _stripNationalPrefixA.carrierCode;\n\n\t\t\t// Sometimes `stripNationalPrefixAndCarrierCode()` won't actually\n\t\t\t// strip national prefix and will instead prepend some digits to the `number`:\n\t\t\t// for example, when number `2345678` is passed with `VI` country selected,\n\t\t\t// it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\n\t\t\t// So check if the `potentialNationalNumber` is actually at the end of `this.nationalNumberDigits`.\n\n\n\t\t\tif (potentialNationalNumber) {\n\t\t\t\tvar index = this.nationalNumberDigits.indexOf(potentialNationalNumber);\n\t\t\t\tif (index < 0 || index !== this.nationalNumberDigits.length - potentialNationalNumber.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (carrierCode) {\n\t\t\t\tthis.carrierCode = carrierCode;\n\t\t\t}\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\t\t\tif (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumberDigits) && !this.isPossibleNumber(potentialNationalNumber)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif (matchesEntirely(this.nationalNumberDigits, this.metadata.nationalNumberPattern()) && !matchesEntirely(potentialNationalNumber, this.metadata.nationalNumberPattern())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.nationalPrefix = this.nationalNumberDigits.slice(0, this.nationalNumberDigits.length - potentialNationalNumber.length);\n\t\t\tthis.nationalNumberDigits = potentialNationalNumber;\n\t\t\treturn this.nationalPrefix;\n\t\t}\n\t}, {\n\t\tkey: 'isPossibleNumber',\n\t\tvalue: function isPossibleNumber(number) {\n\t\t\tvar validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.isInternational()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'isCountryCallingCodeAmbiguous',\n\t\tvalue: function isCountryCallingCodeAmbiguous() {\n\t\t\treturn this.metadata.countryCallingCodes()[this.countryCallingCode].length > 1;\n\t\t}\n\t}, {\n\t\tkey: 'createFormattingTemplate',\n\t\tvalue: function createFormattingTemplate(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.getTemplateForNumberFormatPattern(format, this.nationalPrefix);\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.template = template;\n\t\t\tthis.populatedNationalNumberTemplate = template;\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\treturn this.template;\n\t\t}\n\n\t\t/**\r\n   * Generates formatting template for a national phone number,\r\n   * optionally containing a national prefix, for a format.\r\n   * @param  {Format} format\r\n   * @param  {string} nationalPrefix\r\n   * @return {string}\r\n   */\n\n\t}, {\n\t\tkey: 'getTemplateForNumberFormatPattern',\n\t\tvalue: function getTemplateForNumberFormatPattern(format, nationalPrefix) {\n\t\t\tvar pattern = format.pattern();\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n\t\t\t\tpattern = pattern\n\t\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n\t\t\t}\n\n\t\t\t// Generate a dummy national number (consisting of `9`s)\n\t\t\t// that fits this format's `pattern`.\n\t\t\t//\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\t//\n\t\t\tvar digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.nationalNumberDigits.length > digits.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strictPattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strictPattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.nationalNumberDigits : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// format : `$1 $2 $3`\n\t\t\t// digits : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.nationalNumberDigits` has already sufficient length\n\t\t\t// to satisfy the `pattern` completely then `this.nationalNumberDigits`\n\t\t\t// is used instead of `digits`.\n\n\t\t\tvar strictPattern = new RegExp('^' + pattern + '$');\n\t\t\tvar nationalNumberDummyDigits = this.nationalNumberDigits.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.nationalNumberDigits` has already sufficient length\n\t\t\t// to satisfy the `pattern` completely then use it\n\t\t\t// instead of `digits`.\n\t\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\n\t\t\t\tdigits = nationalNumberDummyDigits;\n\t\t\t}\n\n\t\t\tvar numberFormat = this.getFormatFormat(format);\n\t\t\tvar includesNationalPrefix = void 0;\n\n\t\t\tif (nationalPrefix) {\n\t\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t\tvar numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t\tif (parseDigits(numberFormatWithNationalPrefix) === nationalPrefix + parseDigits(numberFormat)) {\n\t\t\t\t\t\tnumberFormat = numberFormatWithNationalPrefix;\n\t\t\t\t\t\tincludesNationalPrefix = true;\n\t\t\t\t\t\tvar i = nationalPrefix.length;\n\t\t\t\t\t\twhile (i > 0) {\n\t\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format.\n\t\t\tvar template = digits\n\t\t\t// Format the dummy phone number according to the format.\n\t\t\t.replace(new RegExp(pattern), numberFormat)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\n\t\t\tif (nationalPrefix) {\n\t\t\t\tif (!includesNationalPrefix) {\n\t\t\t\t\t// Prepend national prefix to the template manually.\n\t\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn template;\n\t\t}\n\t}, {\n\t\tkey: 'formatNextNationalNumberDigits',\n\t\tvalue: function formatNextNationalNumberDigits(digits) {\n\t\t\t// Using `.split('')` to iterate through a string here\n\t\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t\t// `.split('')` is generally not safe for Unicode,\n\t\t\t// but in this particular case for `digits` it is safe.\n\t\t\t// for (const digit of digits)\n\t\t\tfor (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i3++];\n\t\t\t\t} else {\n\t\t\t\t\t_i3 = _iterator3.next();\n\t\t\t\t\tif (_i3.done) break;\n\t\t\t\t\t_ref3 = _i3.value;\n\t\t\t\t}\n\n\t\t\t\tvar digit = _ref3;\n\n\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t// and return the formatted digits so far.\n\t\t\t\t// If more digits are entered than the current format could handle.\n\t\t\t\tif (this.populatedNationalNumberTemplate.slice(this.populatedNationalNumberTemplatePosition + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n\t\t\t\t\t// Reset the format.\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\tthis.populatedNationalNumberTemplate = this.populatedNationalNumberTemplate.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t}\n\n\t\t\t// Return the formatted phone number so far.\n\t\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1);\n\n\t\t\t// The old way which was good for `input-format` but is not so good\n\t\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n\t\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n\t\t}\n\t}, {\n\t\tkey: 'isInternational',\n\t\tvalue: function isInternational() {\n\t\t\treturn this.international;\n\t\t}\n\t}, {\n\t\tkey: 'getFormatFormat',\n\t\tvalue: function getFormatFormat(format) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn applyInternationalSeparatorStyle(format.internationalFormat());\n\t\t\t}\n\t\t\t// if (this.nationalPrefix) {\n\t\t\t// \treturn `\\\\d{${this.nationalPrefix.length}}` + this.getSeparatorAfterNationalPrefix() + format.format()\n\t\t\t// }\n\t\t\t// // If national prefix formatting rule is defined for\n\t\t\t// // this phone number format.\n\t\t\t// if (format.nationalPrefixFormattingRule()) {\n\t\t\t// \t// If the user did input the national prefix,\n\t\t\t// \t// or if the national prefix formatting rule\n\t\t\t// \t// does not use national prefix at all,\n\t\t\t// \t// and only uses \"nationalPrefixFormattingRule\"\n\t\t\t// \t// as a hack to format the number properly,\n\t\t\t// \t// then apply the \"nationalPrefixFormattingRule\".\n\t\t\t// \tif (format.usesNationalPrefix() && !this.nationalPrefix) {\n\t\t\t// \t\t// Don't use \"nationalPrefixFormattingRule\"\n\t\t\t// \t\t// because it assumes that national prefix is present,\n\t\t\t// \t\t// but it hasn't been input.\n\t\t\t// \t} else {\n\t\t\t// \t\treturn format.format().replace(\n\t\t\t// \t\t\tFIRST_GROUP_PATTERN,\n\t\t\t// \t\t\tformat.nationalPrefixFormattingRule()\n\t\t\t// \t\t)\n\t\t\t// \t}\n\t\t\t// }\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determineTheCountry',\n\t\tvalue: function determineTheCountry() {\n\t\t\tthis.country = findCountryCode(this.countryCallingCode, this.nationalNumberDigits, this.metadata);\n\t\t}\n\n\t\t/**\r\n   * Returns an instance of `PhoneNumber` class.\r\n   * Will return `undefined` if no national (significant) number\r\n   * digits have been entered so far, or if no `defaultCountry` has been\r\n   * set and the user enters a phone number not in international format.\r\n   */\n\n\t}, {\n\t\tkey: 'getNumber',\n\t\tvalue: function getNumber() {\n\t\t\tif (!(this.countryCallingCode || this.defaultCountry) || !this.nationalNumberDigits) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tvar phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumberDigits, this.metadata.metadata);\n\t\t\tif (this.carrierCode) {\n\t\t\t\tphoneNumber.carrierCode = this.carrierCode;\n\t\t\t}\n\t\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\t\treturn phoneNumber;\n\t\t}\n\n\t\t/**\r\n   * @deprecated\r\n   * This method is used in `react-phone-number-input/source/input-control.js`\r\n   * in versions before `3.0.16`.\r\n   */\n\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.nationalNumberDigits;\n\t\t}\n\t}, {\n\t\tkey: 'getNonFormattedTemplate',\n\t\tvalue: function getNonFormattedTemplate() {\n\t\t\treturn this.getFullNumber(this.getNonFormattedNationalNumber()).replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n\t\t}\n\n\t\t/**\r\n   * Returns formatted phone number template.\r\n   * @return {string} [template]\r\n   */\n\n\t}, {\n\t\tkey: 'getTemplate',\n\t\tvalue: function getTemplate() {\n\t\t\tif (!this.template) {\n\t\t\t\treturn this.getNonFormattedTemplate();\n\t\t\t}\n\t\t\tvar index = -1;\n\t\t\tvar i = 0;\n\t\t\twhile (i < (this.international ? 1 : 0) + this.digits.length) {\n\t\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn cutAndStripNonPairedParens(this.template, index + 1);\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexport default AsYouType;\n\n\nexport function stripNonPairedParens(string) {\n\tvar dangling_braces = [];\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i);\n\t\t} else if (string[i] === ')') {\n\t\t\tdangling_braces.pop();\n\t\t}\n\t\ti++;\n\t}\n\tvar start = 0;\n\tvar cleared_string = '';\n\tdangling_braces.push(string.length);\n\tfor (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray4) {\n\t\t\tif (_i4 >= _iterator4.length) break;\n\t\t\t_ref4 = _iterator4[_i4++];\n\t\t} else {\n\t\t\t_i4 = _iterator4.next();\n\t\t\tif (_i4.done) break;\n\t\t\t_ref4 = _i4.value;\n\t\t}\n\n\t\tvar index = _ref4;\n\n\t\tcleared_string += string.slice(start, index);\n\t\tstart = index + 1;\n\t}\n\treturn cleared_string;\n}\n\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n\tif (string[cutBeforeIndex] === ')') {\n\t\tcutBeforeIndex++;\n\t}\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\n\nexport function closeNonPairedParens(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\tvar opening_braces = countOccurences('(', retained_template);\n\tvar closing_braces = countOccurences(')', retained_template);\n\tvar dangling_braces = opening_braces - closing_braces;\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nexport function countOccurences(symbol, string) {\n\tvar count = 0;\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray5) {\n\t\t\tif (_i5 >= _iterator5.length) break;\n\t\t\t_ref5 = _iterator5[_i5++];\n\t\t} else {\n\t\t\t_i5 = _iterator5.next();\n\t\t\tif (_i5.done) break;\n\t\t\t_ref5 = _i5.value;\n\t\t}\n\n\t\tvar character = _ref5;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\tvar result = '';\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map","import Metadata from './metadata';\n\nexport default function getCountries(metadata) {\n\treturn new Metadata(metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(country, international, metadata) {\n  return country && international ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}\n//# sourceMappingURL=inputValuePrefix.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\n\nexport function createInput(defaultMetadata) {\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"international\", \"metadata\"]);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix(country, international, metadata); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();\n//# sourceMappingURL=InputSmart.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"country\", \"international\", \"metadata\", \"inputComponent\"]);\n\n    var prefix = getInputValuePrefix(country, international, metadata);\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}\n//# sourceMappingURL=InputBasic.js.map","import AsYouType from './AsYouType';\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/core';\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\nexport function formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n//# sourceMappingURL=formatPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isValidPhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isValid();\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isPossiblePhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isPossible();\n}\n//# sourceMappingURL=isPossiblePhoneNumber.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nexport function createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var country = _ref.country,\n        defaultCountry = _ref.defaultCountry,\n        useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n        value = _ref.value,\n        onChange = _ref.onChange,\n        metadata = _ref.metadata,\n        smartCaret = _ref.smartCaret,\n        international = _ref.international,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"smartCaret\", \"international\"]);\n\n    var getInitialParsedInput = function getInitialParsedInput() {\n      return getParsedInputForValue(value, country, international, defaultCountry, useNationalFormatForDefaultCountryValue, metadata);\n    }; // This is only used to detect `country` property change.\n\n\n    var _useState = useState(country),\n        _useState2 = _slicedToArray(_useState, 2),\n        prevCountry = _useState2[0],\n        setPrevCountry = _useState2[1]; // This is only used to detect `defaultCountry` property change.\n\n\n    var _useState3 = useState(defaultCountry),\n        _useState4 = _slicedToArray(_useState3, 2),\n        prevDefaultCountry = _useState4[0],\n        setPrevDefaultCountry = _useState4[1]; // `parsedInput` is the `value` passed to the `<input/>`.\n\n\n    var _useState5 = useState(getInitialParsedInput()),\n        _useState6 = _slicedToArray(_useState5, 2),\n        parsedInput = _useState6[0],\n        setParsedInput = _useState6[1]; // This is only used to detect `value` property changes.\n\n\n    var _useState7 = useState(value),\n        _useState8 = _slicedToArray(_useState7, 2),\n        valueForParsedInput = _useState8[0],\n        setValueForParsedInput = _useState8[1]; // If `value` property has been changed externally\n    // then re-initialize the component.\n\n\n    useEffect(function () {\n      if (value !== valueForParsedInput) {\n        setValueForParsedInput(value);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [value]); // If the `country` has been changed then re-initialize the component.\n\n    useEffect(function () {\n      if (country !== prevCountry) {\n        setPrevCountry(country);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [country]); // If the `defaultCountry` has been changed then re-initialize the component.\n\n    useEffect(function () {\n      if (defaultCountry !== prevDefaultCountry) {\n        setPrevDefaultCountry(defaultCountry);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [defaultCountry]); // Update the `value` after `valueForParsedInput` has been updated.\n\n    useEffect(function () {\n      if (valueForParsedInput !== value) {\n        onChange(valueForParsedInput);\n      }\n    }, [valueForParsedInput]);\n    var onParsedInputChange = useCallback(function (parsedInput) {\n      var value;\n\n      if (country) {\n        // Won't allow `+` in the beginning\n        // when a `country` has been specified.\n        if (parsedInput && parsedInput[0] === '+') {\n          parsedInput = parsedInput.slice(1);\n        }\n      } else if (!defaultCountry) {\n        // Force a `+` in the beginning of a `value`\n        // when no `country` and `defaultCountry` have been specified.\n        if (parsedInput && parsedInput[0] !== '+') {\n          parsedInput = '+' + parsedInput;\n        }\n      } // Convert `parsedInput` to `value`.\n\n\n      if (parsedInput) {\n        var asYouType = new AsYouType(country || defaultCountry, metadata);\n        asYouType.input(country && international ? \"+\".concat(getCountryCallingCode(country, metadata)).concat(parsedInput) : parsedInput);\n        var phoneNumber = asYouType.getNumber(); // If it's a \"possible\" incomplete phone number.\n\n        if (phoneNumber) {\n          value = phoneNumber.number;\n        }\n      }\n\n      setParsedInput(parsedInput);\n      setValueForParsedInput(value);\n    }, [country, international, defaultCountry, metadata, setParsedInput, setValueForParsedInput]);\n    var InputComponent = smartCaret ? InputSmart : InputBasic;\n    return React.createElement(InputComponent, _extends({}, rest, {\n      ref: ref,\n      metadata: metadata,\n      international: international,\n      country: country || defaultCountry,\n      value: parsedInput,\n      onChange: onParsedInputChange\n    }));\n  }\n\n  PhoneInput = React.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: PropTypes.string,\n\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: PropTypes.string,\n\n    /**\r\n     * The phone number (in E.164 format).\r\n     * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n     */\n    value: PropTypes.string,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (example: `(213) 373-4253`),\r\n     * or as an international phone number without \"country calling code\"\r\n     * if `international` property is passed (example: `213 373 4253`).\r\n     * Example: \"US\".\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (example: `+1 213 373 4253`)\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n     * The user can still input a phone number in international format.\r\n     * Example: \"US\".\r\n     * `country` and `defaultCountry` properties are mutually exclusive.\r\n     */\n    defaultCountry: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType,\n\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: PropTypes.bool.isRequired,\n\n    /**\r\n     * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n     * then the `value` will be formatted as a national phone number by default.\r\n     * To format the initial `value` of `defaultCountry` as an international number instead\r\n     * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n     */\n    useNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n\n    /**\r\n     * Set to `true` to force international phone number format\r\n     * (without \"country calling code\") when `country` is specified.\r\n     */\n    // international: false,\n\n    /**\r\n     * Prefer national format when formatting E.164 phone number `value`\r\n     * corresponding to `defaultCountry`.\r\n     */\n    useNationalFormatForDefaultCountryValue: true,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\nexport default createInput();\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction getParsedInputForValue(value, country, international, defaultCountry, useNationalFormatForDefaultCountryValue, metadata) {\n  if (!value) {\n    return '';\n  }\n\n  if (!country && !defaultCountry) {\n    return value;\n  }\n\n  var asYouType = new AsYouType(undefined, metadata);\n  asYouType.input(value);\n  var phoneNumber = asYouType.getNumber();\n\n  if (phoneNumber) {\n    if (country) {\n      if (phoneNumber.country && phoneNumber.country !== country) {\n        console.error(\"[react-phone-number-input] Phone number \".concat(value, \" corresponds to country \").concat(phoneNumber.country, \" but \").concat(country, \" was specified instead.\"));\n      }\n\n      if (international) {\n        return phoneNumber.nationalNumber;\n      }\n\n      return parseDigits(phoneNumber.formatNational());\n    } else {\n      if (phoneNumber.country && phoneNumber.country === defaultCountry && useNationalFormatForDefaultCountryValue) {\n        return parseDigits(phoneNumber.formatNational());\n      }\n\n      return value;\n    }\n  } else {\n    return '';\n  }\n}\n//# sourceMappingURL=PhoneInput.js.map","import metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode\r\n} from '../core/index'\r\n\r\nimport { createInput } from '../modules/PhoneInput'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}"],"names":["Object","defineProperty","exports","value","text","caret_position","parse_character","focused_input_character_index","index","length","character","undefined","caret","operation","slice","symbol","string","count","_iterator","split","_isArray","Array","isArray","_i","Symbol","iterator","_ref","next","done","retained_template","template","placeholder","arguments","empty_placeholder","cut_before","opening_braces","_helpers","count_occurences","closing_braces","dangling_braces","replace","should_close_braces","characters_in_template","value_character_index","filled_in_template","_closeBraces2","default","obj","_closeBraces","__esModule","formatter","_templateFormatter2","found","possibly_last_input_character_index","_templateFormatter","element","selectionStart","selectionEnd","start","end","event","keyCode","Keys","Backspace","Delete","navigator","ANDROID_USER_AGENT_REG_EXP","test","userAgent","isAndroid","setSelectionRange","setTimeout","input","_parse","_format","on_change","format_input_text","selection","_dom","getSelection","erase_selection","getOperation","preventDefault","_edit2","_interopRequireDefault","_edit","_parse4","_parse3","_format3","_format2","setCaretPosition","_parse2","getCaretPosition","operation_applied","formatted","_extends","assign","target","i","source","key","prototype","hasOwnProperty","call","_react2","_react","_propTypes2","_propTypes","Input","ref","parse","format","InputComponent","inputComponent","onChange","onCut","onPaste","onKeyDown","rest","keys","indexOf","_objectWithoutProperties","ownRef","useRef","_onChange","useCallback","_inputControl","current","_onPaste","_onCut","_onKeyDown","createElement","isEmptyValue","forwardRef","propTypes","func","isRequired","elementType","type","defaultProps","ParseError","code","instance","Constructor","TypeError","_classCallCheck","this","name","constructor","message","stack","Error","create","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","matchesEntirely","regular_expression","RegExp","_typeof","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","V3","Metadata","metadata","is_object","countries","country_calling_codes","country_phone_code_to_countries","join","type_of","validateMetadata","v1","version","v2","a","b","pa","pb","na","Number","nb","isNaN","compare","v3","filter","_","country","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","_this","formats","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","getType","Type","country_calling_code","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","possibleLengths","getCountryCallingCode","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERN","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","parseDigits","result","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","NON_FIXED_LINE_PHONE_TYPES","getNumberType","options","nationalNumber","phone","nationalNumberPattern","is_of_type","pattern","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","push","sort","mergeArrays","actual_length","minimum_length","is_possible_number","national_number","is_international","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","_slicedToArray","arr","_arr","_n","_d","_e","_s","err","sliceIterator","DEFAULT_OPTIONS","formatExtension","formattedNumber","extension","ext","formatNumber","chooseCountryByCountryCallingCode","addExtension","formatNationalNumber","_ref2","formatRFC3966","fromCountry","IDDPrefix","countryMetadata","defaultIDDPrefix","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalSeparator","useNationalPrefixFormattingRule","internationalFormat","applyInternationalSeparatorStyle","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","search","chooseFormatForNumber","local","trim","PhoneNumber","isCountryCode","_metadata","isPossibleNumber","isValidNumber","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","defaultCountry","_parseInput","_part$split","_part$split2","parseRFC3966","extractFormattedPhoneNumber","with_extension_stripped","number_without_extension","matches","match","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","_extractCountryCallin","extractCountryCallingCode","_parseNationalNumber","carrierCode","_stripNationalPrefixA","stripNationalPrefixAndCarrierCode","potentialNationalNumber","potentialCarrierCode","parseNationalNumber","exactCountry","findCountryCode","parsePhoneNumber","selectedCountry","phoneNumber","valid","extended","possible","startsAt","nationalPrefixForParsing","prefixPattern","prefixMatch","exec","nationalSignificantNumber","capturedGroupsCount","nationalPrefixTransformRule","nationalPhoneNumber","possibleCountries","leadingDigits","_findCountryCode","numberWithoutIDD","IDDPrefixPattern","matchedGroups","stripIDDPrefix","isObject","parsePhoneNumberFromString","isSupportedCountry","parseNumber","error","_normalizeArguments","args","_Array$prototype$slic","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","normalizeArguments","parsePhoneNumberFromString_","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","NATIONAL_PREFIX_SEPARATORS_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN","AsYouType","reset","formattedOutput","international","digits","nationalNumberDigits","setCountry","resetFormat","initializePhoneNumberFormatsForCountry","matchingFormats","chosenFormat","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","formattedDigits","extractFormattedDigits","getFullNumber","inputDigits","getNonFormattedNationalNumber","extractedNumber","startInternationalNumber","nextDigits","isInternational","isCountryCallingCodeAmbiguous","determineTheCountry","previousNationalPrefix","extractNationalPrefix","matchFormats","formatNationalNumberWithNextDigits","attemptToFormatCompletePhoneNumber","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","reformatNationalNumber","createFormattingTemplate","leadingDigitsPatternIndex","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","_iterator2","_isArray2","_i2","formattedNationalNumber","formattedNationalNumberWithNationalPrefix","getSeparatorAfterNationalPrefix","_extractCountryCallingCode","getTemplateForNumberFormatPattern","strictPattern","nationalNumberDummyDigits","numberFormat","getFormatFormat","includesNationalPrefix","numberFormatWithNationalPrefix","_iterator3","_isArray3","_i3","_ref3","cutAndStripNonPairedParens","getNonFormattedTemplate","cutBeforeIndex","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","stripNonPairedParens","times","getCountries","getInputValuePrefix","concat","removeInputValuePrefix","prefix","apply","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","defaultMetadata","InputSmart","getTemplate","React","PropTypes","bool","object","createInput","InputBasic","newValue","formatIncompletePhoneNumber","formatPhoneNumber","formatPhoneNumberIntl","isValidPhoneNumber","isValid","isPossiblePhoneNumber","isPossible","_arrayWithHoles","toString","_iterableToArrayLimit","_nonIterableRest","PhoneInput","useNationalFormatForDefaultCountryValue","smartCaret","getInitialParsedInput","asYouType","getNumber","console","formatNational","getParsedInputForValue","_useState2","useState","prevCountry","setPrevCountry","_useState4","prevDefaultCountry","setPrevDefaultCountry","_useState6","parsedInput","setParsedInput","_useState8","valueForParsedInput","setValueForParsedInput","useEffect","onParsedInputChange","autoComplete","_arguments","_formatPhoneNumber","_formatPhoneNumberIntl","_getCountries","_getCountryCallingCode","_isPossiblePhoneNumber","_isValidPhoneNumber"],"mappings":"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"}